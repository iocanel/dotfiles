#!/bin/bash

# Function to display top-level help message
show_help() {
    echo "nix-sdk: A tool to manage and use custom Nix packages."
    echo ""
    echo "Usage:"
    echo "  nix-sdk [--dry-run] install <package-name> <version>"
    echo "      Install a new version of the package, fetching the necessary SHA and updating the package file."
    echo ""
    echo "  nix-sdk use <package-name> <version>"
    echo "      Use the specified version of the package by entering a nix-shell."
    echo ""
    echo "Options:"
    echo "  --dry-run    Perform the install operation without making any changes."
    echo "  --help       Show this help message."
    echo ""
    echo "Examples:"
    echo "  nix-sdk install quarkus-cli 3.15.0"
    echo "  nix-sdk --dry-run install quarkus-cli 3.15.0"
    echo "  nix-sdk use quarkus-cli 3.15.0"
    exit 0
}

# Function to display help for the 'install' subcommand
show_install_help() {
    echo "Usage: nix-sdk [--dry-run] install <package-name> <version>"
    echo ""
    echo "Installs a new version of a package by copying the default.nix, updating the version, and fetching the new SHA."
    echo ""
    echo "Options:"
    echo "  --dry-run    Show the changes that would be made without modifying any files."
    echo "  --help       Show this help message."
    echo ""
    echo "Examples:"
    echo "  nix-sdk install quarkus-cli 3.15.0"
    echo "  nix-sdk --dry-run install quarkus-cli 3.15.0"
    exit 0
}

# Function to display help for the 'use' subcommand
show_use_help() {
    echo "Usage: nix-sdk use <package-name> <version>"
    echo ""
    echo "Uses the specified version of a package by entering a nix-shell with the corresponding package."
    echo ""
    echo "Options:"
    echo "  --help       Show this help message."
    echo ""
    echo "Examples:"
    echo "  nix-sdk use quarkus-cli 3.15.0"
    exit 0
}

# Function to install a new version
install_package() {
    PACKAGE_NAME=$1
    NEW_VERSION=$2

    # Paths
    PACKAGE_DIR="/etc/nixos/packages/$PACKAGE_NAME"
    DEFAULT_FILE="$PACKAGE_DIR/default.nix"
    NEW_FILE="$PACKAGE_DIR/${NEW_VERSION}.nix"

    # Check if the package directory exists
    if [[ ! -d "$PACKAGE_DIR" ]]; then
        echo "Error: Package directory $PACKAGE_DIR not found."
        exit 1
    fi

    # Check if the default file exists
    if [[ ! -f "$DEFAULT_FILE" ]]; then
        echo "Error: Default package file $DEFAULT_FILE not found."
        exit 1
    fi

    # Extract the current version from the default.nix file
    CURRENT_VERSION=$(grep -Po 'version = "\K[^"]+' "$DEFAULT_FILE")

    if [[ -z "$CURRENT_VERSION" ]]; then
        echo "Error: Could not find current version in $DEFAULT_FILE."
        exit 1
    fi

    echo "Detected current version: $CURRENT_VERSION"

    # Fetch the new SHA using nix-prefetch-url
    NEW_SHA=$(nix-prefetch-url "https://github.com/quarkusio/quarkus/releases/download/${NEW_VERSION}/quarkus-cli-${NEW_VERSION}.tar.gz")

    # Check if nix-prefetch-url was successful
    if [[ $? -ne 0 ]]; then
        echo "Error: Failed to fetch SHA using nix-prefetch-url."
        exit 1
    fi

    echo "Fetched new SHA: $NEW_SHA"

    if [[ "$DRY_RUN" == true ]]; then
        echo "Dry run: No changes will be made."
        echo "Changes that would be made:"
        echo "  - Copy $DEFAULT_FILE to $NEW_FILE"
        echo "  - Replace version $CURRENT_VERSION with $NEW_VERSION"
        echo "  - Update sha256 to $NEW_SHA"
    else
        # Use sudo to copy the default file to the new version file
        sudo cp "$DEFAULT_FILE" "$NEW_FILE"

        # Replace all occurrences of the current version with the new version (using sudo)
        sudo sed -i "s/$CURRENT_VERSION/$NEW_VERSION/g" "$NEW_FILE"

        # Update the sha256 in the new file (using sudo)
        sudo sed -i "s/sha256 = \".*\";/sha256 = \"$NEW_SHA\";/" "$NEW_FILE"

        # Output success message
        echo "Package $PACKAGE_NAME updated from version $CURRENT_VERSION to $NEW_VERSION in $NEW_FILE"
    fi
}

# Function to use the specified package version
use_package() {
    PACKAGE_NAME=$1
    VERSION=$2

    # Paths
    PACKAGE_FILE="/etc/nixos/packages/$PACKAGE_NAME/${VERSION}.nix"

    # Check if the package file exists
    if [[ ! -f "$PACKAGE_FILE" ]]; then
        echo "Error: Package file $PACKAGE_FILE not found."
        exit 1
    fi

    # Execute nix-shell with the appropriate callPackage command
    echo "Using $PACKAGE_NAME version $VERSION"
    nix-shell -p "with import <nixpkgs> {}; callPackage $PACKAGE_FILE {}"
}

# Parse the arguments
DRY_RUN=false
if [[ "$1" == "--dry-run" ]]; then
    DRY_RUN=true
    shift
fi

if [[ "$1" == "--help" || "$1" == "" ]]; then
    show_help
fi

SUBCOMMAND=$1
shift

# Subcommand: install
if [[ "$SUBCOMMAND" == "install" ]]; then
    if [[ "$1" == "--help" ]]; then
        show_install_help
    fi

    if [[ $# -ne 2 ]]; then
        echo "Usage: nix-sdk install [--dry-run] <package-name> <version>"
        exit 1
    fi

    PACKAGE_NAME=$1
    NEW_VERSION=$2

    install_package "$PACKAGE_NAME" "$NEW_VERSION"

# Subcommand: use
elif [[ "$SUBCOMMAND" == "use" ]]; then
    if [[ "$1" == "--help" ]]; then
        show_use_help
    fi

    if [[ $# -ne 2 ]]; then
        echo "Usage: nix-sdk use <package-name> <version>"
        exit 1
    fi

    PACKAGE_NAME=$1
    VERSION=$2

    use_package "$PACKAGE_NAME" "$VERSION"

else
    echo "Error: Invalid subcommand. Use 'install', 'use', or '--help' for more information."
    exit 1
fi
