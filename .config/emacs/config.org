* My Emacs configuration
** General Settings
*** Autosave and Backup
    #+BEGIN_SRC emacs-lisp
      (setq make-backup-files nil) ; stop creating backup~ files
      (setq auto-save-default nil) ; stop creating #autosave# files
    #+END_SRC
*** Avy    
    #+BEGIN_SRC emacs-lisp
      (use-package avy
	:bind ("M-s" . 'avy-goto-char))
    #+END_SRC
*** Buffers
    Use ibuffer instead of the default buffer list.
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x C-b") 'ibuffer)
    #+END_SRC
*** Clipboard
    #+BEGIN_SRC emacs-lisp
      (setq x-select-enable-clipboard t)
    #+END_SRC
*** Code Completion
**** IDO
***** Initialize
      #+BEGIN_SRC emacs-lisp
        (setq ido-enable-flex-matching t)
        (setq ido-create-new-buffer 'always)
        (setq ido-everywhere t)
        (ido-mode 1)
      #+END_SRC
***** Smex      
      #+BEGIN_SRC emacs-lisp
	(use-package smex :ensure t)
	(global-set-key (kbd "M-x") 'smex)
	(global-set-key (kbd "M-X") 'smex-major-mode-commands)
      #+END_SRC
***** Vertical Mode
****** Package
       #+BEGIN_SRC emacs-lisp
         (use-package ido-vertical-mode
           :ensure t
           :init
           (ido-vertical-mode 1))
       #+END_SRC
****** Colors
       #+BEGIN_SRC emacs-lisp
         (setq ido-use-faces t)
         (set-face-attribute 'ido-vertical-first-match-face nil
                             :foreground "#ff0000")
         (set-face-attribute 'ido-vertical-only-match-face nil
                             :foreground "#ff0000")
         (set-face-attribute 'ido-vertical-match-face nil
                             :foreground "#a0b7c1")
       #+END_SRC
****** Keybindings
       #+BEGIN_SRC emacs-lisp
         (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right)
       #+END_SRC      
****** Dired integration
       #+BEGIN_SRC emacs-lisp
         (setq ido-show-dot-for-dired t)
       #+END_SRC
****** Bookmark integration
       #+BEGIN_SRC emacs-lisp
         (require 'bookmark)
         (require 'ido)

         (defun ido-bookmark-jump ()
           "Uses ido to search for the bookmark"
           (interactive)
           (bookmark-jump
            (bookmark-get-bookmark
             (ido-completing-read "find bookmark: " (bookmark-all-names)))))

         (provide 'ido-bookmark-jump)

         (global-set-key (kbd "C-x r b") 'ido-bookmark-jump)
        #+END_SRC
**** Smart Tab
     #+BEGIN_SRC emacs-lisp
       (use-package smart-tab
	 :ensure t
	 :init
	 (progn
	   (setq hippie-expand-try-functions-list '(yas-hippie-try-expand
					       try-complete-file-name-partially
					       try-expand-dabbrev
					       ;try-expand-dabbrev-visible
					       ;try-expand-dabbrev-all-buffers
					       ;try-complete-lisp-symbol-partially
					       ;try-complete-lisp-symbol
	   ))
	   (setq smart-tab-debug t)
	   (setq smart-tab-user-provided-completion-function 'company-complete)
	   (setq smart-tab-using-hippie-expand t)
	   (setq smart-tab-disabled-major-modes '(org-mode term-mode eshell-mode inferior-python-mode))
	   (global-smart-tab-mode 1)))
     #+END_SRC
**** Company Mode
     Company mode is an auto completion framework with a lot of extension.
     The extensions are going to be installed exactly where needed.
***** Package
     #+BEGIN_SRC emacs-lisp
       (use-package company
         :ensure t
         :init
        (add-hook 'after-init-hook 'global-company-mode))
     #+END_SRC
***** Improvements
      #+BEGIN_SRC emacs-lisp
	(setq company-tooltip-limit 20)                      ; bigger popup window
	(setq company-idle-delay 0)                          ; decrease delay before autocompletion popup shows
	(setq company-echo-delay 0)                          ; remove annoying blinking
	(setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
	(setq company-tooltip-align-annotations t)           ; aligns annotation to the right hand side
	(setq company-dabbrev-downcase nil)                  ; don't downcase
      #+END_SRC
*** Dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :ensure t
       :config
       (dashboard-setup-startup-hook)
       (setq dahboard-items `((recents . 10)))
       (setq dahboard-banner-logo-title "Emacs")
       (setq initial-buffer-choice 'dashboard-refresh-buffer)
       )
   #+END_SRC
*** Evil Mode
    #+BEGIN_SRC emacs-lisp
      (use-package evil
	:ensure t
	:init
	(evil-mode 1))

      (use-package evil-leader
	:ensure t
	:config
	(evil-leader/set-leader "<SPC>")
	(global-evil-leader-mode))

      ;; Fix issue with undo granularity (See: https://github.com/syl20bnr/spacemacs/issues/2675)
      (setq evil-want-fine-undo nil)
    #+END_SRC
*** Hydra
    #+BEGIN_SRC emacs-lisp
      (use-package hydra
	:ensure t)
    #+END_SRC
*** Key Bindings
**** Escape for cancel
   #+BEGIN_SRC emacs-lisp
     (define-key isearch-mode-map [escape] 'isearch-abort)
     (define-key isearch-mode-map "\e" 'isearch-abort)
     (global-set-key [escape] 'keyboard-escape-quit)
   #+END_SRC
*** Mark multiple   
    #+BEGIN_SRC emacs-lisp
      (use-package mark-multiple
	:ensure t
	:bind ("C-c m" . 'mark-next-like-this))

      (use-package expand-region
	:ensure t
	:bind ("C-q" . 'er/expand-region))
    #+END_SRC
*** Popup kill ring
    #+BEGIN_SRC emacs-lisp
      (use-package popup-kill-ring
	:ensure t
	:bind ("M-y" . popup-kill-ring))
    #+END_SRC
*** Swiwper    
    #+BEGIN_SRC emacs-lisp
      (use-package swiper
	:bind ("C-s" . 'swiper)
	:custom
	(swiper-action-recenter t))
    #+END_SRC
*** Windows
**** Switching
     #+BEGIN_SRC emacs-lisp
       (use-package ace-window 
	 :ensure t
	 :init
	 (global-set-key (kbd "M-o") 'ace-window))
     #+END_SRC
**** Splitting     
     #+BEGIN_SRC emacs-lisp
       (defun split-and-follow-horizontaly ()
	 (interactive)
	 (split-window-below)
	 (balance-windows)
	 (other-window 1))

	 (global-set-key (kbd "C-x 2") 'split-and-follow-horizontaly)

       (defun split-and-follow-verticaly ()
	 (interactive)
	 (split-window-right)
	 (balance-windows)
	 (other-window 1))

	 (global-set-key (kbd "C-x 3") 'split-and-follow-verticaly)
     #+END_SRC
*** Which Key
    #+BEGIN_SRC emacs-lisp
      (use-package which-key
        :ensure t
        :init
        (which-key-mode))
   #+END_SRC  
** UI
*** Layout
    #+BEGIN_SRC emacs-lisp
      (tool-bar-mode -1)
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
    #+END_SRC      
*** Windows
**** winum
     #+BEGIN_SRC emacs-lisp
       (use-package winum
	 :ensure t
	 :init
       (setq winum-keymap
	   (let ((map (make-sparse-keymap)))
	     (define-key map (kbd "C-`") 'winum-select-window-by-number)
	     (define-key map (kbd "M-0") 'winum-select-window-0-or-10)
	     (define-key map (kbd "M-1") 'winum-select-window-1)
	     (define-key map (kbd "M-2") 'winum-select-window-2)
	     (define-key map (kbd "M-3") 'winum-select-window-3)
	     (define-key map (kbd "M-4") 'winum-select-window-4)
	     (define-key map (kbd "M-5") 'winum-select-window-5)
	     (define-key map (kbd "M-6") 'winum-select-window-6)
	     (define-key map (kbd "M-7") 'winum-select-window-7)
	     (define-key map (kbd "M-8") 'winum-select-window-8)
	     map)))
     #+END_SRC
*** Editor
**** Line numbers
     #+BEGIN_SRC emacs-lisp
	      (use-package linum-relative
		:ensure t
		:init
		(setq linum-relative-current-symbol ""))

       ;; We don't want this on non programming modes
       (add-hook 'prog-mode-hook (lambda () (linum-relative-mode)))
     #+END_SRC
**** Sudo Edit
This allows editing files that require root access.

#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+END_SRC
The plugin plays extremely well with a custom su wrapper that combines su with passwordless sudo.
**** Rainbow delimeters
     To be able to match parenthesis etc:
     #+BEGIN_SRC emacs-lisp
       (use-package rainbow-delimiters
	 :ensure t
	 :init
	 (rainbow-delimiters-mode 1))
     #+END_SRC
**** Highlight line
     #+BEGIN_SRC emacs-lisp
       (global-hl-line-mode t)
     #+END_SRC
*** Theme
    #+BEGIN_SRC emacs-lisp
     (load "~/.config/emacs/darcula-theme.el")
    #+END_SRC
**** Custor cursor
     #+BEGIN_SRC emacs-lisp
       (setq-default cursor-type 'bar)
       (set-cursor-color "#ff0000")
       (set-face-attribute 'cursor "#ff0000")
     #+END_SRC
**** Custom colors
     #+BEGIN_SRC emacs-lisp      
       (defun darkside()
	 "Use dark background"
	 (interactive)
	 (set-foreground-color "#a9b7c1")
	 (set-background-color "#262626")
         (set-cursor-color "#ff0000")
	 (set-face-background 'vertical-border "#262626"))

       (defun lightside()
	 "Use light background"
	 (interactive)
	 (set-foreground-color "#000000")
	 (set-background-color "#e5e5e0")
         (set-cursor-color "#ff0000")
	 (set-face-background 'highlight "#555555")
	 (set-face-background 'vertical-border "#e5e5e0"))
       (darkside)
       ;; Let's hide the ugly vertical border
       (set-face-foreground 'vertical-border (face-background 'vertical-border))
     #+END_SRC
*** Status Line
**** Package
     #+BEGIN_SRC emacs-lisp
       ;; Powerline
       ;;
       ;;(use-package powerline
       ;;  :ensure t)

       ;;(require 'powerline)
       ;;(powerline-center-theme)
       (setq powerline-default-separator    'arrow)

       ;; Smartline
       ;;
       (use-package smart-mode-line-powerline-theme
	  :ensure t
	  :after powerline
	  :after smart-mode-line
	  :config
	  (sml/setup)
	  (sml/apply-theme 'dark))

       ;; Spaceline
       ;;
       ;;(use-package spaceline
       ;; :ensure t
       ;;	 :config
       ;;	 (require 'spaceline-config)
       ;;	 (setq powerline-default-separator (quote arrow))
       ;;	 (spaceline-spacemacs-theme))
     #+END_SRC
**** Customization
     #+BEGIN_SRC emacs-lisp
       (set-face-attribute 'mode-line nil
			   :foreground "#262626"
			   :background "#555555"
			   :box nil)
       (set-face-attribute 'mode-line-inactive nil
			   :foreground "#262626"
			   :background "#262626"
			   :box nil)
       (set-face-attribute 'mode-line-buffer-id nil
			   :foreground "#262626"
			   :background "#c57632"
			   :box nil)

       (setq powerline-arrow-shape 'wave)
     #+END_SRC     
*** Completion
** Tools
*** Terminal
**** Eshell
***** Package
      #+BEGIN_SRC emacs-lisp
      (use-package eshell :ensure t)
      #+END_SRC
***** Visual commands
      #+BEGIN_SRC emacs-lisp
	(add-hook 'eshell-mode-hook
		  (lambda ()
		    (add-to-list 'eshell-visual-commands "ssh")
		    (add-to-list 'eshell-visual-commands "tail")
		    (add-to-list 'eshell-visual-commands "top")))
      #+END_SRC
     #+BEGIN_SRC emacs-lisp
     #+END_SRC
***** Aliases
      #+BEGIN_SRC emacs-lisp
	(add-hook 'eshell-mode-hook (lambda ()
	    (eshell/alias "ls" "TERM=ansi ls --color=always $*")
	    (eshell/alias "e" "find-file $1")
	    (eshell/alias "ff" "find-file $1")
	    (eshell/alias "emacs" "find-file $1")
	    (eshell/alias "vi" "find-file $1")
	    (eshell/alias "ee" "find-file-other-window $1")

	    (eshell/alias "gd" "magit-diff-unstaged")
	    (eshell/alias "gds" "magit-diff-staged")
	    (eshell/alias "d" "dired $1")

            (eshell/alias "ll" "ls -AlohG --color=always $*")))
      #+END_SRC
***** Prompt
      #+BEGIN_SRC emacs-lisp
	(defun pwd-replace-home (pwd)
	  "Replace home in PWD with tilde (~) character."
	  (interactive)
	  (let* ((home (expand-file-name (getenv "HOME")))
		 (home-len (length home)))
	    (if (and
		 (>= (length pwd) home-len)
		 (equal home (substring pwd 0 home-len)))
		(concat "~" (substring pwd home-len))
	      pwd)))

	(defun pwd-shorten-dirs (pwd)
	  "Shorten all directory names in PWD except the last two."
	  (let ((p-lst (split-string pwd "/")))
	    (if (> (length p-lst) 2)
		(concat
		 (mapconcat (lambda (elm) (if (zerop (length elm)) ""
				       (substring elm 0 1)))
			    (butlast p-lst 2)
			    "/")
		 "/"
		 (mapconcat (lambda (elm) elm)
			    (last p-lst 2)
			    "/"))
	      pwd))	)

	(setq eshell-prompt-function (lambda nil
	  (concat
	   (propertize (pwd-shorten-dirs (pwd-replace-home (eshell/pwd))) 'face `(:foreground "#528369"))
	   (propertize "\n" 'face `(:foreground "#c57632"))
	   (propertize " $ " 'face `(:foreground "#c57632")))))
	(setq eshell-highlight-prompt nil)
      #+End_SRC
***** Disable highlighting
      #+BEGIN_SRC emacs-lisp
	(add-hook 'eshell-mode-hook (lambda ()
					    (setq-local global-hl-line-mode nil)))
      #+END_SRC
***** Autosuggest
      #+BEGIN_SRC emacs-lisp
	(use-package esh-autosuggest
	  :ensure t)
	(add-hook 'eshell-mode-hook (lambda ()
					    (setq-local esh-autosuggest-mode 1)))
      #+END_SRC
**** Mutli-term
     #+BEGIN_SRC emacs-lisp
       (use-package multi-term :ensure t)
       (defvar multi-term-program "/bin/zsh")
     #+END_SRC
**** Ansi-term
     #+BEGIN_SRC emacs-lisp
       (defvar my-term-shell "/bin/zsh")
       (defadvice ansi-term (before force-zsh)
         (interactive (list my-term-shell)))
       (ad-activate 'ansi-term)
     #+END_SRC
**** Terminal Binding
     #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "<S-'>") 'multi-term)
     #+END_SRC
*** Version Control
**** Magit
     #+BEGIN_SRC emacs-lisp
       (use-package magit
	 :ensure t)

       ;; Pull request integration
       (use-package magit-gh-pulls
	 :ensure t)

       ;;Hook
       (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls)
       ;; Key bindings
       (global-set-key (kbd "C-c g s") 'magit-status)
       (global-set-key (kbd "C-c g p r") 'magit-gh-pulls-popup)
     #+END_SRC
**** Git timemachine
     Allows you a buffer to move back in time (previous commits)
***** Package     
      #+BEGIN_SRC emacs-lisp
	(use-package git-timemachine
	  :ensure t
	  :config
	  (global-set-key (kbd "C-c g t") 'git-timemachine-toggle))
      #+END_SRC
***** Hooks
     #+BEGIN_SRC emacs-lisp
       (eval-after-load 'git-timemachine
	 '(progn
	    (evil-make-overriding-map git-timemachine-mode-map 'normal)
	    ;; force update evil keymaps after git-timemachine-mode loaded
	    (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps)))
     #+END_SRC
***** Hydras
      #+BEGIN_SRC emacs-lisp
	(defhydra hydra-git-timemachine ()
	  "Git timemachine"
	  ("p" git-timemachine-show-previous-revision "previous revision")
	  ("n" git-timemachine-show-next-revision "next revision")
	  ("q" nil "quit"))
      #+END_SRC
**** Git gutter
     Displays marks on the left bar about changes since last commit.
     #+BEGIN_SRC emacs-lisp
       (use-package git-gutter-fringe :ensure t)
       ;; We don't want this on non programming modes
       (add-hook 'prog-mode-hook (lambda () (git-gutter-mode)))
     #+END_SRC
**** Github
***** Github Pull Request
      #+BEGIN_SRC emacs-lisp
      (use-package github-pullrequest :ensure t)
      #+END_SRC
***** Github Issues
      #+BEGIN_SRC emacs-lisp
      (use-package github-issues :ensure t)
      #+END_SRC
*** Projectile
**** Package
    #+BEGIN_SRC emacs-lisp
      (use-package projectile
	:config
	(projectile-global-mode)
	(setq projectile-completion-system 'ido)
	(setq projectile-use-git-grep t)
	(setq projectile-switch-project-action 'venv-projectile-auto-workon)
	(global-set-key (kbd "C-c p o") 'projectile-switch-project)
	(global-set-key (kbd "C-c p f") 'projectile-find-file)
	(global-set-key (kbd "C-c p g") 'projectile-grep)
	:ensure t)
    #+END_SRC
**** Hydra
     #+BEGIN_SRC emacs-lisp
       (defhydra projectile-hydra (:hint nil :exit t)
		"
		^Edit^                           ^Test or Task^                       ^Navigation^
		^^^^^^-----------------------------------------------------------------------------------------------
		_R_: projectile-rename           _e_: projectile-run-eshell           _f_: projectile-find-file-dwim
		_G_: magit-status                                                     _g_: projectile-grep
										      _d_: projectile-dired
										      _r_: projectile-recentf
		"
					       ; Edit
	 ("R" projectile-rename)
	 ("G" magit-status)
					       ; Task
	 ("e" projectile-run-eshel)
	 ("R" go-play-region)
					       ; Navifation
	 ("f" projectile-find-file-dwim)
	 ("g" projectile-grep)
	 ("d" projectile-dired)
	 ("r" projectile-recentf)
	 ("q" nil "quit"))

       (evil-leader/set-key "p" 'projectile-hydra/body) 
     #+END_SRC
*** Yasnippet
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
	:ensure t
	:init
	(yas-global-mode)
	:config
	(use-package yasnippet-snippets
	  :ensure t)
	(yas-reload-all))

      (setq yas-snippet-dirs (append yas-snippet-dirs
				     '("~/.config/yasnippets")))
      ;; Use yas-indent-line fixed in yaml-mode. This fixes issues with parameter mirroring breaking indentation
      (setq yas-indent-line 'fixed)
    #+END_SRC
*** LaTex
**** Package
     #+BEGIN_SRC emacs-lisp
       (use-package auctex
	 :ensure t
	 :mode ("\\.tex\\'" . latex-mode)
	 :commands (latex-mode LaTeX-mode plain-tex-mode)
	 :init
	 (progn
	   (add-hook 'LaTeX-mode-hook #'LaTeX-preview-setup)
	   (add-hook 'LaTeX-mode-hook #'flyspell-mode)
	   (add-hook 'LaTeX-mode-hook #'turn-on-reftex)
	   (setq TeX-auto-save t
		 TeX-parse-self t
		 TeX-save-query nil
		 TeX-PDF-mode t)
	   (setq-default TeX-master nil)))

     #+END_SRC
**** Preview
     #+BEGIN_SRC emacs-lisp
       (use-package preview
	 :commands LaTeX-preview-setup
	 :init
	 (progn
	   (setq-default preview-scale 1.4
			   preview-scale-function '(lambda () (* (/ 10.0 (preview-document-pt)) preview-scale)))))
     #+END_SRC
**** Autofill
     #+BEGIN_SRC emacs-lisp
       (defun schnouki/latex-auto-fill ()
	 "Turn on auto-fill for LaTeX mode."
	 (turn-on-auto-fill)
	 (set-fill-column 80)
	 (setq default-justification 'left))
       (add-hook 'LaTeX-mode-hook #'schnouki/latex-auto-fill)
     #+END_SRC
**** Skip LaTex commands from spellchecking
     #+BEGIN_SRC emacs-lisp
       (defvar schnouki/ispell-tex-skip-alists
	 '("cite" "nocite"
	   "includegraphics"
	   "author" "affil"
	   "ref" "eqref" "pageref"
	   "label"))
       (setq ispell-tex-skip-alists
	     (list
	      (append (car ispell-tex-skip-alists)
		      (mapcar #'(lambda (cmd) (list (concat "\\\\" cmd) 'ispell-tex-arg-end)) schnouki/ispell-tex-skip-alists))
		     (cadr ispell-tex-skip-alists)))
     #+END_SRC
**** Synchronize with Evince
     #+BEGIN_SRC emacs-lisp
       (defun synctex/un-urlify (fname-or-url)
	 "A trivial function that replaces a prefix of file:/// with just /."
	 (if (string= (substring fname-or-url 0 8) "file:///")
	     (substring fname-or-url 7)
	   fname-or-url))

       (defun synctex/evince-sync (file linecol &rest ignored)
	 "Handle synctex signal from Evince."
	 (let* ((fname (url-unhex-string (synctex/un-urlify file)))
		(buf (find-buffer-visiting fname))
		(line (car linecol))
		(col (cadr linecol)))
	   (if (null buf)
	       (message "[Synctex]: %s is not opened..." fname)
	     (switch-to-buffer buf)
	     (goto-char (point-min))
	     (forward-line (1- (car linecol)))
	     (unless (= col -1)
	       (move-to-column col)))))

       (defvar *dbus-evince-signal* nil)

       (defun synctex/enable-evince-sync ()
	 "Enable synctex with Evince over DBus."
	 (require 'dbus)
	 (when (and
		(eq window-system 'x)
		(fboundp 'dbus-register-signal))
	   (unless *dbus-evince-signal*
	     (setf *dbus-evince-signal*
		   (dbus-register-signal
		    :session nil "/org/gnome/evince/Window/0"
		    "org.gnome.evince.Window" "SyncSource"
		    'synctex/evince-sync)))))

       (add-hook 'LaTeX-mode-hook 'synctex/enable-evince-sync)
     #+END_SRC
** Modes
*** Org Mode
**** Package
     #+BEGIN_SRC emacs-lisp
       (use-package org
	 :config
	 (org-babel-do-load-languages 'org-babel-load-languages
				      '((shell      . t)
					(js         . t)
					(emacs-lisp . t)
					(scala      . t)
					(python     . t))))
     #+END_SRC
**** Evil    
     #+BEGIN_SRC emacs-lisp
     (use-package org-evil :ensure t)
     #+END_SRC
**** Code blocks
***** Edit code in a new window
      By pressing (C-c ') you can edit the code in a new buffer.
      #+BEGIN_SRC emacs-lisp
        (setq org-src-window-setup 'current-window)
      #+END_SRC    
***** Code block identation
      #+BEGIN_SRC emacs-lisp
        (setq org-src-tab-acts-natively t)
      #+END_SRC
***** Babel packs
      #+BEGIN_SRC emacs-lisp
      (use-package ob-go :ensure t)
      (use-package ob-typescript :ensure t)
      #+END_SRC
**** Bullets
    To replace ascii asterisks with bullets:    
    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :ensure t
        :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode)))) 
    #+END_SRC
**** Presentaions
***** org-present
      #+BEGIN_SRC emacs-lisp
	;; Seems missing at the moment
        ;; (use-package org-present :ensure t)
      #+END_SRC
***** ox-reveal
      #+BEGIN_SRC emacs-lisp
	(use-package ox-reveal :ensure t)
      #+END_SRC
**** Blogging
***** Installation
      To install the org2blog plugin:
      #+BEGIN_SRC emacs-lisp
        (use-package org2blog :ensure t)
      #+END_SRC
***** Setup
      #+BEGIN_SRC emacs-lisp
        (let (blog-password)
          (setq blog-password (replace-regexp-in-string "\n\\'" ""  (shell-command-to-string "pass show websites/iocanel.com/iocanel@gmail.com")))
          (setq org2blog/wp-blog-alist
                `(("iocanel.com"
                   :url "https://iocanel.com/xmlrpc.php"
                   :username "iocanel@gmail.com"
                  :password ,blog-password))))
      #+END_SRC      
***** Troubleshooting
****** Symbol’s function definition is void: org-define-error
       Issue and workaround can be found at: https://github.com/eschulte/epresent/issues/61
	#+BEGIN_SRC emacs-lisp
	(define-obsolete-function-alias 'org-define-error 'define-error)
	#+END_SRC

**** Export Formats
***** asciidoc
      #+BEGIN_SRC emacs-lisp
      (use-package ox-asciidoc :ensure t)
      #+END_SRC
***** markdown
      #+BEGIN_SRC emacs-lisp
      (use-package ox-gfm :ensure t)
      #+END_SRC
** Development
*** Flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
	:ensure t
	:config
	(add-hook 'prog-mode-hook (lambda () (flycheck-mode))))

    #+END_SRC
*** Angular
    #+BEGIN_SRC emacs-lisp
    (use-package ng2-mode :ensure t)
    #+END_SRC
*** Go
**** Go Mode
     #+BEGIN_SRC emacs-lisp
              (use-package go-mode
                :ensure t)
       (require 'go-mode)
       (add-hook 'before-save-hook 'gofmt-before-save)
     #+END_SRC
**** Completion
***** Package
      #+BEGIN_SRC emacs-lisp
        (use-package company-go
          :ensure t
          :init
          (add-hook 'go-mode-hook (lambda ()
                                  (set (make-local-variable 'company-backends) '(company-go))
                                  (company-mode))))
      #+END_SRC
**** Depenendencies
     Install the following using from the command line:
    #+BEGIN_SRC shell
    go get -u -v github.com/nsf/gocode
    go get -u -v github.com/rogpeppe/godef
    go get -u -v golang.org/x/tools/cmd/guru
    go get -u -v golang.org/x/tools/cmd/gorename
    go get -u -v golang.org/x/tools/cmd/goimports
    #+END_SRC
**** Go guru
     #+BEGIN_SRC emacs-lisp
       (use-package go-guru
	 :ensure t
	 :commands go-guru-hl-identifier-mode
	 :init (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode))
     #+END_SRC
**** Goflymake
     To install goflymake we first need to build the goflymake binary:
     #+BEGIN_SRC sh
       go get -u github.com/dougm/goflymake
       go build github.com/dougm/goflymake
     #+END_SRC

     #+BEGIN_SRC emacs-lisp
       (add-to-list 'load-path "~/workspace/src/github.com/dougm/goflymake")
       (require 'go-flymake)
       (require 'go-flycheck)
     #+END_SRC
**** Go eldoc
     #+BEGIN_SRC emacs-lisp
       (use-package go-eldoc
	 :ensure t
	 :commands go-eldoc-setup
	 :init (add-hook 'go-mode-hook 'go-eldoc-setup))
     #+END_SRC
**** Go Tooling
     #+BEGIN_SRC emacs-lisp
     (use-package go-imports :ensure t)
     (use-package go-rename :ensure t)
     (use-package go-snippets :ensure t)
     (use-package go-projectile :ensure t)
     #+END_SRC
**** Go Hydra
     #+BEGIN_SRC emacs-lisp
       (defhydra go-hydra (:hint nil :exit t)
	 "
	 ^Edit^                           ^Test or Task^                       ^Navigation^
	 ^^^^^^-----------------------------------------------------------------------------------------------
	 _u_: go-remove-unused-imports    _P_: go-play-buffer                  _r_: go-guru-referrers
	 _F_: gofmt                       _R_: go-play-region                  _d_: go-guru-definition
	 _G_: magit-status
	 "
					       ; Edit
	 ("u" go-remove-unused-imports)
	 ("F" gofmt)
	 ("G" magit-status)
					       ; Task
	 ("P" go-play-buffer)
	 ("R" go-play-region)
					       ; Navifation
	 ("r" go-guru-referrers)
	 ("d" go-guru-definition)
	 ("q" nil "quit"))

       (evil-leader/set-key "g" 'go-hydra/body)
     #+END_SRC
*** Html
**** emmet-mode
     #+BEGIN_SRC emacs-lisp
       (defun add-emmet-expand-to-smart-tab-completions ()
	 ;; Add an entry for current major mode in
	 ;; `smart-tab-completion-functions-alist' to use
	 ;; `emmet-expand-line'.
	 (add-to-list 'smart-tab-completion-functions-alist
		      (cons major-mode #'emmet-expand-yas)))

       (use-package emmet-mode :ensure t
	 :commands (emmet-mode emmet-expand-line)
	 :hook (sgml-mode css-mode)
	 :init
	 (setq emmet-indentation 2)
	 (setq emmet-move-cursor-between-quotes t))

       (add-hook 'html-mode-hook 'add-emmet-expand-to-smart-tab-completions)
       (add-hook 'css-mode-hook 'add-emmet-expand-to-smart-tab-completions)
     #+END_SRC
*** Java
**** COMMENT Eclim
     #+BEGIN_SRC emacs-lisp
       (use-package eclim
	 :ensure t
	 :config 
	 (use-package company-emacs-eclim
	   :ensure t
	   :config
	   (company-emacs-eclim-setup)))

       (setq
	;; Use another eclimd executable
	eclimd-executable "/usr/lib/eclipse/eclimd"
	;; Specify the workspace to use by default
	eclimd-default-workspace "/home/iocanel/workspace/eclipse/default"
	;; Whether or not to block emacs until eclimd is ready
	eclimd-wait-for-process t)

       (add-hook 'java-mode-hook (lambda () (eclim-mode 1)))
     #+END_SRC
**** Meghanada
***** Package
     #+BEGIN_SRC emacs-lisp
       (use-package meghanada
	 :ensure t
	 :init
	 (setq meghanada-java-path "java")
	 (setq meghanada-maven-path "mvn")
	 (setq company-meghanada-prefix-length 2)
	 (setq meghanada-server-jvm-option "-ea -server -XX:+UseConcMarkSweepGC -XX:SoftRefLRUPolicyMSPerMB=50 -Xverify:none -Xms512m -Dfile.encoding=UTF-8")
	 :config
	 (add-hook 'java-mode-hook
		   (lambda ()
		     ;; meghanada-mode on
		     (meghanada-mode t)
		     (flycheck-mode +1)
		     (setq c-basic-offset 2)
		     ;; use code format (disable it for now as it can become really annoying).
		     ;;(add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))
		     )))
     #+END_SRC
***** Hydra
      #+BEGIN_SRC emacs-lisp
	 (defhydra meghanada-hydra (:hint nil :exit t)
	 "
	 ^Edit^                           ^Tast or Task^                       ^Navigation^
	 ^^^^^^-----------------------------------------------------------------------------------------------
	 _f_: meghanada-compile-file      _m_: meghanada-restart               _r_: meghanada-reference
	 _c_: meghanada-compile-project   _t_: meghanada-run-task              _d_: meghanada-jump-declaration
	 _o_: meghanada-optimize-import   _j_: meghanada-run-junit-test-case   _b_: meghanada-back-jump
	 _s_: meghanada-switch-test-case  _J_: meghanada-run-junit-class
	 _v_: meghanada-local-variable    _R_: meghanada-run-junit-recent
	 _i_: meghanada-import-all        _T_: meghanada-typeinfo
	 _G_: magit-status
	 "
	   ; Edit
	   ("f" meghanada-compile-file)
	   ("c" meghanada-compile-project)
	   ("o" meghanada-optimize-import)
	   ("v" meghanada-local-variable)
	   ("i" meghanada-import-all)
	   ("G" magit-status)

	   ; Task
	   ("s" meghanada-switch-test-case)
	   ("m" meghanada-restart)

	   ("t" meghanada-run-task)
	   ("j" meghanada-run-junit-test-case)
	   ("J" meghanada-run-junit-class)
	   ("R" meghanada-run-junit-recent)
	   ("T" meghanada-typeinfo)
	   ; Navifation
	   ("r" meghanada-reference)
	   ("d" meghanada-jump-declaration)
	   ("b" meghanada-back-jump)
	   ("q" nil "quit"))

	(evil-leader/set-key "m" 'meghanada-hydra/body)
	(define-key evil-normal-state-map (kbd "C-z") 'meghanada-hydra/body)
      #+END_SRC
**** Groovy
     #+BEGIN_SRC emacs-lisp
       (use-package groovy-mode :ensure t)
     #+END_SRC
**** Kotlin
     #+BEGIN_SRC emacs-lisp
     (use-package kotlin-mode :ensure t)
     #+END_SRC
*** Javascript
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
	:ensure t
	:init
	(setq js-basic-indent 2)
	(setq-default js2-basic-indent 2
		      js2-basic-offset 2
		      js2-auto-indent-p t
		      js2-cleanup-whitespace t
		      js2-enter-indents-newline t
		      js2-indent-on-enter-key t
		      js2-global-externs (list "window" "module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON" "jQuery" "$")))

	(add-hook 'js2-mode-hook
		  (lambda ()
		    (push '("function" . ?ƒ) prettify-symbols-alist)))

	(add-hook 'js2-mode-hook
		  (lambda () (flycheck-select-checker "javascript-eslint")))

	(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

    #+END_SRC
*** Python
**** Packages
    #+BEGIN_SRC emacs-lisp
      (use-package python-mode :ensure t)
      (use-package virtualenvwrapper :ensure t)
      (use-package pytest :ensure t)

    #+END_SRC
**** py-flycheck
     #+BEGIN_SRC emacs-lisp
       (add-hook 'python-mode-hook (lambda () (flycheck-mode)))
     #+END_SRC
**** pyenv
     #+BEGIN_SRC emacs-lisp
       (use-package pyenv-mode :ensure t)

       (defun projectile-pyenv-mode-set ()
	 "Set pyenv version matching project name."
	 (let ((project (projectile-project-name)))
	   (if (member project (pyenv-mode-versions))
	       (pyenv-mode-set project)
	     (pyenv-mode-unset))))

       (add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)

     #+END_SRC
**** anaconda-mode
     #+BEGIN_SRC emacs-lisp
       (use-package anaconda-mode :ensure t)
       (use-package company-anaconda :ensure t)

       (add-hook 'python-mode-hook 'anaconda-mode)
       (add-hook 'python-mode-hook 'anaconda-eldoc-mode)


       (use-package company-anaconda
	 :ensure t
	 :init (add-to-list 'company-backends 'company-anaconda))
     #+END_SRC
**** jedi     
     #+BEGIN_SRC emacs-lisp
       (use-package company-jedi :ensure t)

       (defun add-company-jedi-to-backends ()
	 (add-to-list 'company-backends 'company-jedi))

       (add-hook 'python-mode-hook 'add-company-jedi-to-backends)
     #+END_SRC
**** Notes
     Issues encountered in the past with *ob-ipython*.
*** Protobuf
   #+BEGIN_SRC emacs-lisp
   (use-package protobuf-mode :ensure t)
   #+END_SRC
*** Typescript
**** typescript-mode
     #+BEGIN_SRC emacs-lisp
       (defun setup-typescript-mode ()
	 (interactive)
	 (setq compilation-read-command nil)
	 ;; Create make command for single file.
	 (let ((tsc "/bin/tsc"))
	   (set (make-local-variable 'compile-command)
		(progn
		  (format "%s --target es5 %s"
			  tsc
			  (buffer-file-name))))
	   (message compile-command)))

       (use-package typescript-mode
	 :ensure t
	 :mode "\\.ts\\'"
	 :init
	 (setup-typescript-mode))
     #+END_SRC
**** tide
    #+BEGIN_SRC emacs-lisp
      (defun setup-tide-mode ()
	(interactive)
	(tide-setup)
	(flycheck-mode +1)
	(setq flycheck-check-syntax-automatically '(save mode-enabled))
	(eldoc-mode +1)
	(tide-hl-identifier-mode +1)
	;; company is an optional dependency. You have to
	;; install it separately via package-install
	;; `M-x package-install [ret] company`
	(company-mode +1))

      (use-package tide
	:ensure t)

	(add-hook 'typescript-mode-hook
		  (lambda ()
		    (setup-tide-mode)
		    (add-hook 'before-save-hook 'tide-format-before-save nil t)))

    #+END_SRC
**** tss
     #+BEGIN_SRC emacs-lisp
       (use-package tss :ensure t)
     #+END_SRC
*** JSON
    #+BEGIN_SRC emacs-lisp
    (use-package json-mode :ensure t)
    (use-package json-reformat :ensure t)
    #+END_SRC
*** YAML
    #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode :ensure t)
    #+END_SRC
** Operations
*** Docker
     #+BEGIN_SRC emacs-lisp
     (use-package docker :ensure t)
     (use-package docker-tramp :ensure t)
     (use-package dockerfile-mode :ensure t)
     #+END_SRC
*** Kubermetes
**** Plugins
     #+BEGIN_SRC emacs-lisp
      (use-package kubernetes :ensure t)
      (use-package kubernetes-evil :ensure t)
      (use-package kubernetes-tramp :ensure t)
     #+END_SRC
**** Custom Functions
     #+BEGIN_SRC emacs-lisp
       (defun kubernetes-java-debug (point)
	 "Portforwards port 5005 of the selected pod."
	 (interactive "d")
	 (when-let (s (get-text-property point 'kubernetes-copy))
	   (kill-new s)

	   ;; Print a user-friendly message for feedback.
	   (let ((n-lines 1) (first-line nil))
	     (with-temp-buffer
	       (insert s)
	       (goto-char (point-min))
	       (setq first-line (buffer-substring (line-beginning-position) (line-end-position)))
	       (while (search-forward "\n" nil t)
		 (setq n-lines (1+ n-lines))))
	     (let ((ellipsized (kubernetes-utils-ellipsize first-line 70)))
	       (if (< 1 n-lines)
		   (message "Copied %s lines, starting with: %s" n-lines ellipsized)
		 (async-shell-command (format "%s %s %s" "kubectl port-forward"  ellipsized "5005:5005"))
		 (message "Portforwarding: %s" ellipsized)
		 )))))
     #+END_SRC
**** Hydra
     #+BEGIN_SRC emacs-lisp
       (defhydra kubernetes-hydra ()
	"Kubernetes"
	("o" kubernetes-overview "overview")
	("C" kubernetes-create-from-buffer "create")
	("D" kubernetes-delete-from-buffer "delete")
	("R" kubernetes-replace-from-buffer "replace")
	("e" kubernetes-exec-into "exec")
	("l" kubernetes-logs-follow "logs")
	("d" kubernetes-mark-for-delete "mark for delete")
	("x" kubernetes-execute-marks "execute marks")
	("p" kubernetes-portforward "portforward")
	("q" nil "quit")
       )

       (evil-leader/set-key "k" 'kubernetes-hydra/body)
       (define-key evil-normal-state-map (kbd "C-k") 'kubernetes-hydra/body)
     #+END_SRC
*** Jenkins
**** Pipeline from buffer
     We are going to create a shell script that gets the job done and then we are going to call that from within emacs.
    
     Define the a shell script named jenkins-run-pipeline
     #+BEGIN_SRC shell :tangle /home/iocanel/scripts/dev/jenkins-run-pipeline :shebang #!/bin/bash
       JOB="dev"
       CONFIG_XML="/tmp/jenkins-job.xml"

       PIPELINE=`cat $1`

       read -r -d '' HEADER << __HEADER__ 
       <?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job@2.3">
	 <actions/>
	 <description/>
	 <keepDependencies>false</keepDependencies>
	 <properties/>
	 <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.9">
	   <script>
       __HEADER__

       read -r -d '' FOOTER << __FOOTER__ 
	   </script>
	   <sandbox>true</sandbox>
	 </definition>
	 <triggers/>
       </flow-definition>
       __FOOTER__

       echo "$HEADER" > /tmp/jenkins-job.xml
       echo "$PIPELINE" >> /tmp/jenkins-job.xml
       echo "$FOOTER" >> /tmp/jenkins-job.xml

       curl -X POST http://jenkins.minikube.io/job/$JOB/config.xml --data-binary "@$CONFIG_XML" 2> /dev/null
       BUILD_ID=`curl -X GET http://jenkins.minikube.io/job/$JOB/api/json 2> /dev/null | jq '.nextBuildNumber'`
       QUEUE_ITEM_URL=`curl -i http://jenkins.minikube.io/job/dev/build 2> /dev/null | grep Location | cut -d " " -f2`
       echo "Starting Job:$JOB with Build number: $BUILD_ID"

       #Wait until the build is up and running
       echo -n "Waiting"
       while true; do
	       STATUS_CODE=`curl --write-out %{http_code} --silent --output /dev/null  http://jenkins.minikube.io/job/$JOB/$BUILD_ID/api/json`
	       if [[ $STATUS_CODE -eq 404 ]]; then
		       echo -n "."
		       sleep 2
	       else
		       break
	       fi
       done
       echo ""

       TOTAL_LINES=0
       # Loop forever (or at least until the build is over) and get the logs
       while true; do
	       RUNNING=`curl -X GET http://jenkins.minikube.io/job/$JOB/$BUILD_ID/api/json 2> /dev/null | jq '.building'`
	       TEXT=`curl -s http://jenkins.minikube.io/job/$JOB/$BUILD_ID/consoleText 2> /dev/null`
	       TO_DISPLAY=`echo "$TEXT" | tail -n +$(($TOTAL_LINES+1))`
	       if [ "$TO_DISPLAY" == "" ];then
		       continue;
	       fi
	       echo "$TO_DISPLAY"
	       PRINTED_LINES=`echo "$TO_DISPLAY" | wc -l`
	       TOTAL_LINES=$(($TOTAL_LINES + $PRINTED_LINES))

	       if [ "$RUNNING" == "true" ]; then
		       sleep 2
	       else
		       break
	       fi
       done
     #+END_SRC
     Define a function that calls jenkins-run-pipeline.
     #+BEGIN_SRC emacs-lisp
       (defun jenkins-run-pipeline-from-buffer ()
	 "Runs the jenkins pipeline in the buffer"
	 (interactive)
	 (async-shell-command (format "%s %s" "jenkins-run-pipeline"  buffer-file-name)))
     #+END_SRC
**** Use groovy-mode for Jenkinsfiles
     #+BEGIN_SRC emacs-lisp
       (add-to-list 'auto-mode-alist '("Jenkinsfile" . groovy-mode))
     #+END_SRC
     

    

     
