* My Emacs configuration
** Quickstart
Here goes changes that need to take effect as soon as possible.
*** Doom
#+begin_src emacs-lisp
  (use-package all-the-icons)
  (use-package doom-themes)
  (use-package doom-modeline
        :init
        (setq doom-modeline-buffer-file-name-style 'truncate-upto-project
              doom-modeline-icon t
              doom-modeline-major-mode-icon t
              doom-modeline-major-mode-color-icon t
              doom-modeline-lsp t
              doom-modeline-column-zero-based t)
         :hook (after-init . doom-modeline-mode ))

  (load-theme 'doom-one t)
#+end_src
** Internal Settings
*** Timing startup time
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src
*** COMMENT Byte compile on startup
#+begin_src emacs-lisp
  (defun iocanel/byte-recompile-emacs-d()
    (interactive)
    "Byte compile everything under emacs.d."
    (byte-recompile-directory (expand-file-name "~/.emacs.d") 0))
#+end_src
**** COMMENT Hook Registration
#+begin_src emacs-lisp
   (add-hook 'emacs-startup-hook 'iocanel/byte-recompile-emacs-d)
#+end_src
*** Eval Path
    #+BEGIN_SRC emacs-lisp
      (setq max-lisp-eval-depth 10000)
    #+END_SRC
*** Emacs via gotty
#+begin_src emacs-lisp
  (defun iocanel/gotty-emacs()
    (interactive)
    "Run emacs in gotty."
    (async-shell-command "gotty -a localhost -p  8181 emacs"))
  ;;(add-hook 'emacs-startup-hook 'iocanel/gotty-emacs)
#+end_src
** General Settings
*** Aliases
    #+BEGIN_SRC emacs-lisp
      (defalias 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
*** Auth Sources
**** Password Store
     #+BEGIN_SRC emacs-lisp
       (use-package auth-source-pass
         :config
         (auth-source-pass-enable))
     #+END_SRC
*** Autosave and Backup
    #+BEGIN_SRC emacs-lisp
      (use-package real-auto-save
        :config
        (setq real-auto-save-interval 10)
        :hook (text-mode . real-auto-save-mode)
              (prog-mode . real-auto-save-mode)
              (snippet-mode . (lambda () (real-auto-save-mode -1))))

      (setq backup-directory-alist `(("." . "~/.emacs.d/backups/")))

      (setq delete-old-versions t
            kept-new-versions 6
            kept-old-versions 2
            version-control t)

      (setq auto-save-file-name-transforms
            `((".*" "~/.emacs.d/autosaves/" t)))
      (setq create-lockfiles nil)
    #+END_SRC
**** Recovery diff
Inspired by https://emacs.stackexchange.com/questions/3776/how-to-view-diff-when-emacs-suggests-to-recover-this-file
#+begin_src emacs-lisp
  (defun iocanel/autosave-diff ()
    "Compare the current modified buffer with the autosaved version."
    (interactive)
    (let ((diff-switches "-u")) ;; unified diff
      (diff (buffer-file-name) (make-auto-save-file-name))))
#+end_src
*** Auto Revert
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC
*** Avy
    #+BEGIN_SRC emacs-lisp
      (use-package avy
        :straight (avy :type git :host github :repo "abo-abo/avy")
        :bind ("M-s" . 'avy-goto-char))
    #+END_SRC
*** Async Await
#+begin_src emacs-lisp
  (use-package async-await :defer t)
#+end_src
*** COMMENT Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon :defer t)
#+END_SRC
*** Browser
**** Settings
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "chrome")
#+END_SRC
*** Buffers
    Use ibuffer instead of the default buffer list.
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x C-b") 'ibuffer)
    #+END_SRC
*** Clipboard
    #+BEGIN_SRC emacs-lisp
      (setq x-select-enable-clipboard t)
    #+END_SRC
*** Code Completion
**** COMMENT IDO
***** Initialize
      #+BEGIN_SRC emacs-lisp
        (setq ido-enable-flex-matching t)
        (setq ido-create-new-buffer 'always)
        (setq ido-everywhere t)
        (ido-mode 1)
        ;(setq completing-read-function 'ido-completing-read)
      #+END_SRC
***** Vertical Mode
****** Package
       #+BEGIN_SRC emacs-lisp
         (use-package ido-vertical-mode
           :init
           (ido-vertical-mode 1))
       #+END_SRC
****** COMMENT Colors
       #+BEGIN_SRC emacs-lisp
         (setq ido-use-faces t)
         (set-face-attribute 'ido-vertical-first-match-face nil
                             :foreground "#ff0000")
         (set-face-attribute 'ido-vertical-only-match-face nil
                             :foreground "#ff0000")
         (set-face-attribute 'ido-vertical-match-face nil
                             :foreground "#a0b7c1")
       #+END_SRC
****** Keybindings
       #+BEGIN_SRC emacs-lisp
         (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right)
       #+END_SRC      
****** Dired integration
       #+BEGIN_SRC emacs-lisp
         (setq ido-show-dot-for-dired t)
       #+END_SRC
****** Bookmark integration
       #+BEGIN_SRC emacs-lisp
         (require 'bookmark)
         (require 'ido)

         (defun ido-bookmark-jump ()
           "Uses ido to search for the bookmark"
           (interactive)
           (bookmark-jump
            (bookmark-get-bookmark
             (ido-completing-read "find bookmark: " (bookmark-all-names)))))

         (provide 'ido-bookmark-jump)

         (global-set-key (kbd "C-x r b") 'ido-bookmark-jump)
       #+END_SRC
**** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package flx :defer t)

  (use-package ivy
    :after flx
    :init
    (setq ivy-use-virtual-buffers t
          ivy-re-builders-alist '((swiper . regexp-quote)
                                  (t . ivy--regex-fuzzy))
          completing-read-function 'ivy-completing-read)
    :config
    (ivy-mode 1))

  (use-package counsel
    :bind ("M-x" . 'counsel-M-x))

  (defun read-string (prompt &optional initial-input history default-value inherit-input-method)
  "Read a string"
  (ivy-read prompt nil :initial-input initial-input :history history :def default-value))
#+END_SRC
***** amx
      #+BEGIN_SRC emacs-lisp
                (use-package amx 
                  :config
                  (setq amx-prompt-string "âŒ˜")) 
      #+END_SRC
***** post frame
#+begin_src emacs-lisp
    (use-package ivy-posframe
      :config  (setq ivy-display-function #'ivy-posframe-display-at-frame-center)
               (ivy-posframe-enable)
      :straight (ivy-posframe :type git :host github :repo "tumashu/ivy-posframe"))
#+end_src
**** Helm
#+begin_src emacs-lisp
  (use-package helm)
  (use-package helm-ag
    :config
    (setq helm-ag-command-option "-u"))

  (use-package helm-projectile
    :config
    (setq helm-ag-insert-at-point 'symbol))
#+end_src
**** Smart Tab
     #+BEGIN_SRC emacs-lisp
       (use-package smart-tab
         :init
         (progn
           (setq hippie-expand-try-functions-list '(yas-hippie-try-expand
                                                    try-complete-file-name-partially))
                                               ;try-expand-dabbrev
                                               ;try-expand-dabbrev-visible
                                               ;try-expand-dabbrev-all-buffers
                                               ;try-complete-lisp-symbol-partially
                                               ;try-complete-lisp-symbol
           (setq smart-tab-debug t)
           (setq smart-tab-user-provided-completion-function 'company-complete)
           (setq smart-tab-using-hippie-expand t)
           (setq smart-tab-disabled-major-modes '(org-mode term-mode eshell-mode inferior-python-mode))
           (global-smart-tab-mode 1)))
     #+END_SRC
**** Company Mode
     Company mode is an auto completion framework with a lot of extension.
     The extensions are going to be installed exactly where needed.
***** Package
      #+BEGIN_SRC emacs-lisp
        (use-package company
          :init
          (add-hook 'after-init-hook 'global-company-mode))
      #+END_SRC
***** Improvements
      #+BEGIN_SRC emacs-lisp
        (setq company-tooltip-limit 20)                      ; bigger popup window
        (setq company-idle-delay 0)                          ; decrease delay before autocompletion popup shows
        (setq company-echo-delay 0)                          ; remove annoying blinking
        (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
        (setq company-tooltip-align-annotations t)           ; aligns annotation to the right hand side
        (setq company-dabbrev-downcase nil)                  ; don't downcase
      #+END_SRC
*** COMMENT Compilation
#+begin_src emacs-lisp 
  (setq compilation-shell-minor-mode t)
#+end_src
*** Dashboard
    #+BEGIN_SRC emacs-lisp
      (use-package dashboard
        :init
        :config
        (setq dashboard-items `((recents . 5)
                                (projects . 5)
                                (agenda . 10)))
        (setq dashboard-banner-logo-title "")
        (setq dashboard-startup-banner "~/.config/emacs/emacs-1.png")
        (dashboard-setup-startup-hook)
        (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
    #+END_SRC
*** Exit confirmation
#+begin_src emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+end_src
*** Evil Mode
    #+BEGIN_SRC emacs-lisp
      (use-package evil
        :init
        (evil-mode 1))

      (use-package evil-leader
        :config
        (evil-leader/set-leader "<SPC>")
        (global-evil-leader-mode))

      ;; Fix issue with undo granularity (See: https://github.com/syl20bnr/spacemacs/issues/2675)
      (setq evil-want-fine-undo nil)
    #+END_SRC
*** File Manager
**** Auto revert
To enable auto revert on dired buffers.
#+begin_src emacs-lisp
  (setq dired-auto-revert-buffer t)
  (add-hook 'dired-mode 'auto-revert-mode)
          (add-hook 'maven-pom-mode 'auto-revert-mode)
#+end_src
**** COMMENT Dired Plus
#+begin_src emacs-lisp
  (use-package dired+			;
    :config
    (diredp-toggle-find-file-reuse-dir 1))
#+end_src
**** Dired Narrow
#+begin_src emacs-lisp
  (use-package dired-narrow
    :bind (:map dired-mode-map 
                ("C-c C-n" . dired-narrow)
                ("C-c C-f" . dired-narrow-fuzzy)
                ("C-c C-N" . dired-narrow-regexp)))
#+end_src
**** Dired Subtree
#+begin_src emacs-lisp
(use-package dired-subtree
    :bind (:map dired-mode-map 
                ("<tab>" . dired-subtree-toggle)
                ("<backtab>" . dired-subtree-cycle)))
#+end_src
**** Misc configuration
***** Copy target DWIM
Select the copy destination when 2 dired buffers are visible.
#+begin_src emacs-lisp
  (setq dired-dwim-target t)
#+end_src
***** Expand All
#+begin_src emacs-lisp
  (defun iocanel/dired-expand-all ()
    (interactive)
    "Expand all subtrees in the dired buffer."
    (let ((has-more t))
      (while has-more
        (condition-case ex
            (progn
              (dired-next-dirline 1)
              (dired-subtree-toggle))
            ('error (setq has-more nil))))))
#+end_src
*** Flyspell 
    #+BEGIN_SRC emacs-lisp
      (defun flyspell-enable()
        (flyspell-mode 1)) 

      (defun flyspell-disable()
        (flyspell-mode -1))

      (use-package flyspell
        :defer 10
        :diminish flyspell-mode
        :hook ((prog-mode . flyspell-prog-mode)
               (org-mode . flyspell-enable))
        :config
        (setq ispell-program-name "/usr/bin/aspell"
              ispell-local-dictionary "en_US"
              ispell-dictionary "american" ; better for aspell
              ispell-extra-args '("--sug-mode=ultra" "--lang=en_US")
              ispell-list-command "--list"
              ispell-local-dictionary-alist '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "['â€˜â€™]"
                                               t ; Many other characters
                                               ("-d" "en_US") nil utf-8))))
    #+END_SRC
*** Hydra
    #+BEGIN_SRC emacs-lisp
      (use-package lv)
      (use-package hydra)
    #+END_SRC
*** Indentation
    #+BEGIN_SRC emacs-lisp
      (setq-default indent-tabs-mode nil)
    #+END_SRC
**** Aggresive Indent Mode
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :hook (emacs-lisp-mode. aggressive-indent-mode))
#+end_src
*** iedit
#+begin_src emacs-lisp
  (use-package iedit
    :bind ("C-;" . 'evil-iedit-state/iedit-mode))

  ;; From spacemacs
  (use-package evil-iedit-state
      :commands (evil-iedit-state evil-iedit-state/iedit-mode)
      :init
      (progn
        (setq iedit-current-symbol-default t
              iedit-only-at-symbol-boundaries t
              iedit-toggle-key-default nil)
        (evil-leader/set-key "se" 'evil-iedit-state/iedit-mode)))
#+end_src
*** Key Bindings
**** Escape for cancel
     #+BEGIN_SRC emacs-lisp
       (define-key isearch-mode-map [escape] 'isearch-abort)
       (define-key isearch-mode-map "\e" 'isearch-abort)
       (global-set-key [escape] 'keyboard-escape-quit)
     #+END_SRC
**** Jump outside of quotes
#+BEGIN_SRC emacs-lisp
       (global-set-key [C-tab] 'sp-forward-sexp)
#+END_SRC
*** Mark multiple
    #+BEGIN_SRC emacs-lisp
      (use-package mark-multiple
        :bind ("C-c m" . 'mark-next-like-this))

      (use-package expand-region
        :bind ("C-q" . 'er/expand-region))
    #+END_SRC
*** Multiple cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this)))
#+end_src
*** Popup kill ring
    #+BEGIN_SRC emacs-lisp
      (use-package popup-kill-ring
        :bind ("M-y" . popup-kill-ring))
    #+END_SRC
*** COMMENT Shackle
#+begin_src emacs-lisp
  (use-package shackle
    
    :config
   (setq shackle-lighter "")
      (setq shackle-select-reused-windows nil) ; default nil
      (setq shackle-default-alignment 'below) ; default below
      (setq shackle-default-size 0.4) ; default 0.5

      (setq shackle-rules
            ;; CONDITION(:regexp)        :regexp nil :select nil :inhibit-window-quit nil :size 0.01 :align|:other :same|:popup
            '(("\\*undo-tree\\*"         :regexp t                                        :size 0.3 :align below                   )
              ("*Shell Command Output*"              :select nil                                                                   )
              ("\\*Async Shell.*\\*"     :regexp t   :ignore t                                                                     )
              ("\\*Slack.*"              :regexp t   :select nil                          :size 0.3  :align t                      )
              ("*Help*"                              :select t   :inhibit-window-quit t              :other t                      )
              ("*Completions*"                                                            :size 0.3  :align t                      )
              ("*Messages*"                          :select nil :inhibit-window-quit t              :other t                      )
              ("\\*[Wo]*Man.*\\*"        :regexp t   :select t   :inhibit-window-quit t              :other t                      )
              ("\\*poporg.*\\*"          :regexp t   :select t                                       :other t                      )
              ("\\`\\*helm.*?\\*\\'"     :regexp t                                        :size 0.3  :align t                      )
              ("*Calendar*"                          :select t                            :size 0.3  :align below                  )
              ("*info*"                              :select t   :inhibit-window-quit t                            :same t         )
              )))

      (shackle-mode 1)
#+end_src
*** Swiper
    #+BEGIN_SRC emacs-lisp
      (use-package swiper
        :bind ("C-s" . 'swiper-with-selection)
        :custom
        (swiper-action-recenter t))

      (defun swiper-with-selection (&optional start end)
        "Swiper variation that uses selected text as initial input."
        (interactive (if (use-region-p) (list (region-beginning) (region-end))))
        (if (use-region-p)
            (swiper (buffer-substring start end))
          (swiper))
        (keyboard-escape-quit))
    #+END_SRC
    
*** Screenshots
#+BEGIN_SRC emacs-lisp
  (defun screenshot ()
    "Take a screenshot."
    (interactive)
     (let ((filename (car (find-file-read-args "Save screenshot to: " nil))))
      (shell-command (format "scrot -s '%s'" filename) nil nil)))

#+END_SRC
*** COMMENT Transparency
    #+BEGIN_SRC emacs-lisp
      (set-frame-parameter (selected-frame) 'alpha '(85 . 70))
      (add-to-list 'default-frame-alist '(alpha . (85. 70)))
    #+END_SRC
*** Windows
**** Switching
     #+BEGIN_SRC emacs-lisp
       (use-package ace-window :bind  ("M-o" . 'ace-window))
     #+END_SRC
**** Splitting
     #+BEGIN_SRC emacs-lisp
       (defun split-and-follow-horizontally ()
         (interactive)
         (split-window-right)
         (balance-windows)
         (other-window 1))

       (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

       (defun split-and-follow-vertically ()
         (interactive)
         (split-window-below)
         (balance-windows)
         (other-window 1))

       (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
     #+END_SRC
*** Which Key
    #+BEGIN_SRC emacs-lisp
      (use-package which-key
        :init
        :config
        (setq which-key-idle-delay 1))

       (evil-leader/set-key "w" 'which-key-mode)

    #+END_SRC  
*** COMMENT Xwidgets
#+begin_src emacs-lisp
  ;; Configuration source: https://www.reddit.com/r/emacs/comments/4srze9/watching_youtube_inside_emacs_25
  ;; make these keys behave like normal browser
  (define-key xwidget-webkit-mode-map [mouse-4] 'xwidget-webkit-scroll-down)
  (define-key xwidget-webkit-mode-map [mouse-5] 'xwidget-webkit-scroll-up)
  (define-key xwidget-webkit-mode-map (kbd "<up>") 'xwidget-webkit-scroll-down)
  (define-key xwidget-webkit-mode-map (kbd "<down>") 'xwidget-webkit-scroll-up)
  (define-key xwidget-webkit-mode-map (kbd "M-w") 'xwidget-webkit-copy-selection-as-kill)
  (define-key xwidget-webkit-mode-map (kbd "C-c") 'xwidget-webkit-copy-selection-as-kill)

  ;; adapt webkit according to window configuration chagne automatically
  ;; without this hook, every time you change your window configuration,
  ;; you must press 'a' to adapt webkit content to new window size
  (add-hook 'window-configuration-change-hook (lambda ()
                             (when (equal major-mode 'xwidget-webkit-mode)
                               (xwidget-webkit-adjust-size-dispatch))))

  ;; by default, xwidget reuses previous xwidget window,
  ;; thus overriding your current website, unless a prefix argument
  ;; is supplied
  ;;
  ;; This function always opens a new website in a new window
  (defun xwidget-browse-url-no-reuse (url &optional sessoin)
    (interactive (progn
                   (require 'browse-url)
                   (browse-url-interactive-arg "xwidget-webkit URL: ")))
    (xwidget-webkit-browse-url url t))

  ;; make xwidget default browser
  (setq browse-url-browser-function (lambda (url session)
                                      (other-window 1)
                                      (xwidget-browse-url-no-reuse url)))
#+end_src
** UI
*** Windows
**** COMMENT winum
     #+BEGIN_SRC emacs-lisp
       (use-package winum
         :init
         (setq winum-keymap
               (let ((map (make-sparse-keymap)))
                 (define-key map (kbd "C-`") 'winum-select-window-by-number)
                 (define-key map (kbd "M-0") 'winum-select-window-0-or-10)
                 (define-key map (kbd "M-1") 'winum-select-window-1)
                 (define-key map (kbd "M-2") 'winum-select-window-2)
                 (define-key map (kbd "M-3") 'winum-select-window-3)
                 (define-key map (kbd "M-4") 'winum-select-window-4)
                 (define-key map (kbd "M-5") 'winum-select-window-5)
                 (define-key map (kbd "M-6") 'winum-select-window-6)
                 (define-key map (kbd "M-7") 'winum-select-window-7)
                 (define-key map (kbd "M-8") 'winum-select-window-8)
                 map)))
     #+END_SRC
*** Editor
**** Arrow Keys
     #+BEGIN_SRC emacs-lisp
       (define-minor-mode no-arrows-mode
         "Overrides all major and minor mode keys"
         :global nil)

       (defvar no-arrows-map (make-sparse-keymap "no-arrows-map")
         "Override all major and minor mode keys")

       (add-to-list 'emulation-mode-map-alists
                    `((no-arrows-mode . ,no-arrows-map)))

       (define-key no-arrows-map (kbd "<left>")
         (lambda ()
           (interactive)
           (message "Use Vim keys: h for Left")))

       (define-key no-arrows-map (kbd "<right>")
         (lambda ()
           (interactive)
           (message "Use Vim keys: l for Right")))

       (define-key no-arrows-map (kbd "<up>")
         (lambda ()
           (interactive)
           (message "Use Vim keys: k for Up")))

       (define-key no-arrows-map (kbd "<down>")
         (lambda ()
           (interactive)
           (message "Use Vim keys: j for Down")))

       ;(evil-make-intercept-map no-arrows-map)
       ;(add-hook 'prog-mode-hook 'no-arrows-mode)
       ;(add-hook 'org-mode-hook 'no-arrows-mode)
     #+END_SRC
**** Editorconfig
     #+BEGIN_SRC emacs-lisp
       (use-package editorconfig
         :hook (prog-mode . editorconfig-mode))
     #+END_SRC
**** Highlight line
     #+BEGIN_SRC emacs-lisp
       (global-hl-line-mode t)
     #+END_SRC
**** Highlight parenthesis
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :hook (prog-mode . highlight-parentheses-mode))
#+END_SRC
**** Line numbers
     #+BEGIN_SRC emacs-lisp
       (use-package linum-relative
         :hook ((prog-mode maven-pom-mode) . linum-relative-mode))

       (evil-leader/set-key "r" 'linum-relative-toggle)
     #+END_SRC
**** Sudo edit
     This allows editing files that require root access.

     #+BEGIN_SRC emacs-lisp
       (use-package sudo-edit
         :bind ("s-e" . sudo-edit))
     #+END_SRC
     The plugin plays extremely well with a custom su wrapper that combines su with passwordless sudo.
**** Scroll
     #+BEGIN_SRC emacs-lisp
       (setq scroll-conservatively 100)
     #+END_SRC
**** Smart parenthesis
     #+BEGIN_SRC emacs-lisp
       (use-package smartparens
         :config
         (smartparens-global-mode))

       (use-package evil-smartparens)
     #+END_SRC
**** Rainbow delimeters
     To be able to match parenthesis etc:
     #+BEGIN_SRC emacs-lisp
       (use-package rainbow-delimiters
         :hook (prog-mode . rainbow-delimiters-mode)
         :init
         (rainbow-delimiters-mode 1))

       (custom-set-faces
        ;; custom-set-faces was added by Custom.
        ;; If you edit it by hand, you could mess it up, so be careful.
        ;; Your init file should contain only one such instance.
        ;; If there is more than one, they won't work right.

        '(rainbow-delimiters-depth-1-face ((t (:foreground "#e78779")))) ;; red
        '(rainbow-delimiters-depth-2-face ((t (:foreground "#a9b6c1")))) ;; white
        '(rainbow-delimiters-depth-3-face ((t (:foreground "#528369")))) ;; green
        '(rainbow-delimiters-depth-4-face ((t (:foreground "#c57632")))) ;; yellow
        '(rainbow-delimiters-depth-5-face ((t (:foreground "#3e86a0")))) ;; blue
        '(rainbow-delimiters-depth-6-face ((t (:foreground "#e78779")))) ;; red
        '(rainbow-delimiters-depth-7-face ((t (:foreground "#a9b6c1")))) ;; white
        '(rainbow-delimiters-depth-8-face ((t (:foreground "#528369")))) ;; green
        '(rainbow-delimiters-depth-9-face ((t (:foreground "#c57632")))) ;; yellow
        '(rainbow-delimiters-unmatched-face ((t (:background "red")))))
     #+END_SRC     
**** Rainbow mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :hook (prog-mode . rainbow-mode))
#+END_SRC
**** Visual fill column
     #+BEGIN_SRC emacs-lisp
       (use-package visual-fill-column
         :hook (visual-line-mode . visual-fill-column-mode))
     #+END_SRC
*** Frames
**** COMMENT One on one
#+begin_src emacs-lisp
  (use-package oneonone
    :init (setq 1on1-minibuffer-frame-flag t
                1on1-*Help*-frame-flag t)
    :config (1on1-emacs))

#+end_src
*** Theme
**** COMMENT Darcula
    #+BEGIN_SRC emacs-lisp
      (load "~/.config/emacs/themes/darcula-theme.el")
    #+END_SRC
**** COMMENT Custor cursor
     #+BEGIN_SRC emacs-lisp
       (setq-default cursor-type 'bar)
       (set-cursor-color "#ff0000")
       (set-face-attribute 'cursor "#ff0000")
     #+END_SRC
**** COMMENT Custom colors
     #+BEGIN_SRC emacs-lisp
       (defun darkside()
         "Use dark background"
         (interactive)
         (set-foreground-color "#a9b7c1")
         (set-background-color "#262626")
         (set-cursor-color "#ff0000")
         (set-face-background 'vertical-border "#262626"))

       (defun lightside()
         "Use light background"
         (interactive)
         (set-foreground-color "#000000")
         (set-background-color "#e5e5e0")
         (set-cursor-color "#ff0000")
         (set-face-background 'highlight "#555555")
         (set-face-background 'vertical-border "#e5e5e0"))
       (darkside)
       ;; Let's hide the ugly vertical border
       (set-face-foreground 'vertical-border (face-background 'vertical-border))
     #+END_SRC
**** Size and modes
#+begin_src emacs-lisp
  (defun laptop-mode()
    "Modify theme for latpop use"
    (interactive)
    (set-face-attribute 'default nil :height 75)
    (set-face-attribute 'treemacs-root-face nil :height 90))

  (defun desktop-mode()
    "Modify theme for latpop use"
    (interactive)
    (set-face-attribute 'default nil :height 100)
    (set-face-attribute 'treemacs-root-face nil :height 115))

  (defun comf-mode()
    "Modify theme for comfortable use"
    (interactive)
    (set-face-attribute 'default nil :height 120)
    (set-face-attribute 'treemacs-root-face nil :height 130))

  (defun presenetation-mode()
    "Modify theme for presentations use"
    (interactive)
    (set-face-attribute 'default nil :height 150)
    (set-face-attribute 'treemacs-root-face nil :height 160))

#+end_src
**** Status Line
**** COMMENT powerline
     #+BEGIN_SRC emacs-lisp
       (use-package powerline)

       (require 'powerline)
       (powerline-center-theme)
       (setq powerline-default-separator    'arrow)
     #+END_SRC
**** COMMENT smartline
     #+BEGIN_SRC emacs-lisp
       (use-package smart-mode-line-powerline-theme	  
         :after powerline
         :after smart-mode-line
         :config
         (sml/setup)
         (sml/apply-theme 'dark))

     #+END_SRC
**** COMMENT spaceline
     #+BEGIN_SRC emacs-lisp
       (use-package spaceline
         
         :init
         (progn
           (require 'spaceline-config)
           (setq powerline-default-separator 'arrow)
           (setq spaceline-workspace-numbers-unicode t)
                                               ;	 (setq spaceline-separator-dir-left '(left . left))
                                               ;	 (setq spaceline-separator-dir-right '(right . right))
           (setq powerline-height 32)
           (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
           (winum-mode)
           (spaceline-toggle-major-mode-on)
           (spaceline-toggle-minor-modes-off)
           (spaceline-toggle-hud-on)
           (spaceline-toggle-projectile-root-on)
           (spaceline-toggle-version-control-on)
           (spaceline-toggle-python-pyenv-on)
           (spaceline-spacemacs-theme)))
     #+END_SRC
**** COMMENT Customization
     #+BEGIN_SRC emacs-lisp
       (set-face-attribute 'mode-line nil
                           :background "#262626"
                           :foreground "#555555"
                           :box nil)
       (set-face-attribute 'mode-line-inactive nil
                           :background "#262626"
                           :foreground "#262626"
                           :box nil)
       (set-face-attribute 'mode-line-buffer-id nil
                           :background  "#262626"
                           :foreground  "#c57632"
                           :box nil)
       (set-face-attribute 'mode-line-buffer-id-inactive nil
                           :background  "#262626"
                           :foreground  "#262626"
                           :box nil)

       (set-face-attribute 'powerline-inactive1 nil
                           :background  "#262626"
                           :foreground  "#262626"
                           :box nil)

       (setq powerline-arrow-shape 'arrow)
     #+END_SRC     
*** Completion
** Tool
*** COMMENT Alert
#+begin_src emacs-lisp 
  (use-package alert)
#+end_src
*** Anki
**** editor
#+begin_src emacs-lisp
  (use-package anki-editor
    :defer t)
#+end_src
*** Browser
**** COMMENT Package
     #+BEGIN_SRC emacs-lisp
       (use-package eww
         :defer t)

       (use-package eww-lnum
         :defer t)
     #+END_SRC
**** Hydra
     #+BEGIN_SRC emacs-lisp
       (defhydra eww-hydra (:hint nil :exit t)
         ;; The '_' character is not displayed. This affects columns alignment.
         ;; Remove s many spaces as needed to make up for the '_' deficit.
         "
                       ^Bookmark^                        ^Test or Task^                       ^Navigation^
                       ^^^^^^-----------------------------------------------------------------------------------------------
                        _B_: eww-bookmark-mode            _e_: eww                          _f_: eww-lnum-follow
                        _s_: eww-bookmark-save            _d_: eww-download                 _>_: eww-forward_url
                        _y_: eww-bookamrk-yank                                            _<_: eww-back-url
                        _k_: eww-bookamrk-kill                                            _u_: eww-up-url
                        _b_: eww-bookmark-browse                                          _t_: eww-top-url
                       "
                                               ; Edit
         ("B" eww-bookmark-mode)
         ("s" eww-bookmark-save)
         ("y" eww-bookmark-yank)
         ("k" eww-bookmark-kill)
         ("b" eww-bookamrk-browse)
                                               ; Task
         ("e" eww :hydra-deactivate t)
         ("d" eww-download)
                                               ; Navifation
         ("f" eww-lnum-follow)
         (">" eww-forward-url)
         ("<" eww-back-url)
         ("u" eww-up-url)
         ("t" eww-top-url)
         ("q" nil "quit"))

       (evil-leader/set-key "e" 'eww-hydra/body)
       (add-hook 'eww-after-render-hook 'eww-hydra/body)

     #+END_SRC
**** COMMENT Custom
     #+BEGIN_SRC emacs-lisp
       (defun xdg-open (url &rest ignore)
         "Calls xdg-open"
         (call-process-shell-command (format "xdg-open %s&" (url-encode-url url)) nil 0))

       (setq browse-url-browser-function 'xdg-open)
     #+END_SRC
*** COMMENT Command Log
#+begin_src emacs-lisp
(use-package command-log-mode)
#+end_src
*** demo-it
#+BEGIN_SRC emacs-lisp
  (use-package demo-it
    :defer t)

  (evil-leader/set-key "a d s" 'demo-it-start)
  (evil-leader/set-key "a d e" 'demo-it-end)
  (evil-leader/set-key "a d p" 'demo-it-step)
  (evil-leader/set-key "a d q" 'demo-it-presentation-quit)
  (evil-leader/set-key "a d a" 'demo-it-presentation-advance)
#+END_SRC
*** COMMENT Email
**** mu4e
***** package
      #+BEGIN_SRC emacs-lisp
        (use-package mu4e
          :straight (mu4e :type git :host github :repo "djcb/mu"))

        (use-package org-mu4e
          :straight (org-mu4e :type git :host github :repo "djcb/mu"))

        ;;store link to message if in header view, not to header query
        (setq org-mu4e-link-query-in-headers-mode nil)

        (use-package evil-mu4e)

        (evil-leader/set-key "a m" 'mu4e)
      #+END_SRC
***** account info
      #+BEGIN_SRC emacs-lisp
        (setq user-mail-address "iocanel@gmail.com"
              user-full-name "Ioannis Canellos")

        ;; mail directory
        (setq mu4e-maildir "~/.mail")
        (setq mu4e-drafts-folder "/iocanel@gmail.com/Drafts")
        (setq mu4e-refile-folder "/iocanel@gmail.com/Archived")
        (setq mu4e-trash-folder "/iocanel@gmail.com/Deleted Messages")
        (setq mu4e-sent-folder "/iocanel@gmail.com/Sent Messages")
        (setq mu4e-get-mail-command "~/scripts/util/get-mail-and-index")
        (setq mu4e-update-interval 300)

        (setq mu4e-compose-context-policy 'ask-if-none
              mu4e-context-policy 'pick-first
              mu4e-contexts
              `( ,(make-mu4e-context
                   :name "personal"
                   :enter-func (lambda () (mu4e-message "Switch to iocanel@gmail.com"))
                   ;; leave-func not defined
                   :match-func (lambda (msg)
                                 (when msg
                                   (string-match-p "^/iocanel@gmail.com" (mu4e-message-field msg :maildir))))
                   :vars '((smtpmail-smtp-user               . "iocanel@gmail.com")
                           (mail-reply-to                    . "iocanel@gmail.com")
                           (user-mail-address                . "iocanel@gmail.com")
                           (user-full-name                   . "Ioannis Canellos")
                           (message-send-mail-function       . message-send-mail-with-sendmail)
                           (sendmail-program                 . "/usr/bin/msmtp")
                           (message-sendmail-extra-arguments . ("-C" "/home/iocanel/.config/msmtp/config" "--read-envelope-from"))
                           (message-sendmail-f-is-evil       . t)
                           (mu4e-sent-messages-behavior      . delete)
                           (mu4e-compose-signature           . t)))
                 ,(make-mu4e-context
                   :name "redhat"
                   :enter-func (lambda () (mu4e-message "Switch to ikanello@redhat.com"))
                   :match-func (lambda (msg)
                                 (when msg
                                   (string-match-p "^/ikanello@redhat.com" (mu4e-message-field msg :maildir))))
                   :vars '((smtpmail-smtp-user               . "ikanello@redhat.com")
                           (mail-reply-to                    . "ikanello@redhat.com")
                           (user-mail-address                . "ikanello@redhat.com")
                           (user-full-name                   . "Ioannis Canellos")
                           (message-send-mail-function       . message-send-mail-with-sendmail)
                           (sendmail-program                 . "/usr/bin/msmtp")
                           (message-sendmail-extra-arguments . ("-C" "/home/iocanel/.config/msmtp/config" "--read-envelope-from"))
                           (message-sendmail-f-is-evil       . t)
                           (mu4e-sent-messages-behavior      . delete)
                           (mu4e-compose-signature           .  t)))))
      #+END_SRC
***** COMMENT alerts
      #+BEGIN_SRC emacs-lisp
        (use-package mu4e-alert)

        (setq mu4e-alert-interesting-mail-query
              (concat
               "flag:unread"
               " and not flag:list"
               " and not flag:trashed"
               " and (to:iocanel or ikanello)"))

        (mu4e-alert-set-default-style 'libnotify)
        (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)

        (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
      #+END_SRC
***** msmtp
      #+BEGIN_SRC emacs-lisp
        (setq message-send-mail-function 'message-send-mail-with-sendmail)
        (setq sendmail-program "msmtp")
        (setq message-sendmail-extra-arguments '("-C" "/home/iocanel/.config/msmtp/config" "--read-envelope-from"))
        (setq message-sendmail-f-is-evil 't)
        (setq message-kill-buffer-on-exit t)
      #+END_SRC
***** customization
      #+BEGIN_SRC emacs-lisp
        (set-face-attribute 'mu4e-replied-face nil :inherit 'link :underline nil)
        (set-face-attribute 'mu4e-trashed-face nil :foreground "#555555")
        (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)
        (setq mu4e-headers-results-limit 1000000)
        ;; Why would I want to leave my message open after I've sent it?
        (setq message-kill-buffer-on-exit t)
        ;; Don't ask for a 'context' upon opening mu4e
        (setq mu4e-context-policy 'pick-first)
        ;; Don't ask to quit... why is this the default?
        (setq mu4e-confirm-quit nil)
        (setq mu4e-headers-visible-lines 25)
        ;; convert org mode to HTML automatically
        (setq org-mu4e-convert-to-html t)

        (defalias 'org-mail 'org-mu4e-compose-org-mode)

        (add-hook 'mu4e-view-mode-hook 'mu4e-mark-region-code)
                ;;; Show Smileys
        (add-hook 'mu4e-view-mode-hook 'smiley-buffer)

        ;; enable inline images
        (setq mu4e-view-show-images t)
        ;; use imagemagick, if available
        (when (fboundp 'imagemagick-register-types)
          (imagemagick-register-types))

        (add-hook 'mu4e-compose-mode-hook
                  (lambda ()
                    (set-fill-column 72)
                    (auto-fill-mode 0)
                    (visual-fill-column-mode)
                    (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
                    (visual-line-mode)))

        (defun no-auto-fill ()
          "Turn off auto-fill-mode."
          (auto-fill-mode -1))

        (add-hook 'mu4e-compose-mode-hook #'no-auto-fill)
        (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)
      #+END_SRC
***** bookmarks
      #+BEGIN_SRC emacs-lisp

        (setq mu4e-bookmarks
              '(
                ("date:2d..now AND flag:unread AND NOT flag:trashed AND not flag:list AND date:30d..now AND (to:iocanel or ikanello) AND NOT from:Connect2Go" "Must read" ?r)
                ("flag:unread AND NOT flag:trashed AND NOT maildir:\"/Archived\" AND NOT from:Connect2Go" "Unread messages" ?U)
                ("date:2d..now AND flag:unread AND NOT flag:trashed AND NOT maildir:\"/Archived\" AND NOT from:Connect2Go" "Recent unread messages" ?u)
                ("mime:text/calendar" "Events" ?E)
                ("date:30d..now AND mime:text/calendar" "Recent Events" ?e)
                ("not flag:list AND date:30d..now AND (to:iocanel or ikanello)" "Personal" ?P)
                ("date:2d..now AND not flag:list AND date:30d..now AND (to:iocanel or ikanello)" "Recent Personal" ?p)
                ("date:today" "Today's messages" ?t)
                ("date:7d..now" "Last 7 days" ?w)
                ("from:Connect2Go" "Home events" ?h)))
      #+END_SRC
*** LaTex
**** Package
     #+BEGIN_SRC emacs-lisp
       (use-package auctex
         :mode ("\\.tex\\'" . latex-mode)
         :commands (latex-mode LaTeX-mode plain-tex-mode)
         :init
         (progn
           (add-hook 'LaTeX-mode-hook #'LaTeX-preview-setup)
           (add-hook 'LaTeX-mode-hook #'flyspell-mode)
           (add-hook 'LaTeX-mode-hook #'turn-on-reftex)
           (setq TeX-auto-save t
                 TeX-parse-self t
                 TeX-save-query nil
                 TeX-PDF-mode t)
           (setq-default TeX-master nil)))

     #+END_SRC
**** Preview
     #+BEGIN_SRC emacs-lisp
       (use-package latex-preview-pane)
     #+END_SRC
**** Autofill
     #+BEGIN_SRC emacs-lisp
       (defun schnouki/latex-auto-fill ()
         "Turn on auto-fill for LaTeX mode."
         (turn-on-auto-fill)
         (set-fill-column 80)
         (setq default-justification 'left))
       (add-hook 'LaTeX-mode-hook #'schnouki/latex-auto-fill)
     #+END_SRC
**** Skip LaTex commands from spellchecking
     #+BEGIN_SRC emacs-lisp
       (defvar schnouki/ispell-tex-skip-alists
         '("cite" "nocite"
           "includegraphics"
           "author" "affil"
           "ref" "eqref" "pageref"
           "label"))
       (setq ispell-tex-skip-alists
             (list
              (append (car ispell-tex-skip-alists)
                      (mapcar #'(lambda (cmd) (list (concat "\\\\" cmd) 'ispell-tex-arg-end)) schnouki/ispell-tex-skip-alists))
              (cadr ispell-tex-skip-alists)))
     #+END_SRC
**** COMMENT Synchronize with Evince
     #+BEGIN_SRC emacs-lisp
       (defun synctex/un-urlify (fname-or-url)
         "A trivial function that replaces a prefix of file:/// with just /."
         (if (string= (substring fname-or-url 0 8) "file:///")
             (substring fname-or-url 7)
           fname-or-url))

       (defun synctex/evince-sync (file linecol &rest ignored)
         "Handle synctex signal from Evince."
         (let* ((fname (url-unhex-string (synctex/un-urlify file)))
                (buf (find-buffer-visiting fname))
                (line (car linecol))
                (col (cadr linecol)))
           (if (null buf)
               (message "[Synctex]: %s is not opened..." fname)
             (switch-to-buffer buf)
             (goto-char (point-min))
             (forward-line (1- (car linecol)))
             (unless (= col -1)
               (move-to-column col)))))

       (defvar *dbus-evince-signal* nil)

       (defun synctex/enable-evince-sync ()
         "Enable synctex with Evince over DBus."
         (require 'dbus)
         (when (and
                (eq window-system 'x)
                (fboundp 'dbus-register-signal))
           (unless *dbus-evince-signal*
             (setf *dbus-evince-signal*
                   (dbus-register-signal
                    :session nil "/org/gnome/evince/Window/0"
                    "org.gnome.evince.Window" "SyncSource"
                    'synctex/evince-sync)))))

       (add-hook 'LaTeX-mode-hook 'synctex/enable-evince-sync)
     #+END_SRC
*** Projectile
**** Package
     #+BEGIN_SRC emacs-lisp
       (use-package projectile
         :config
         (projectile-global-mode)
         (setq projectile-completion-system 'ivy
               projectile-enable-caching t
               projectile-use-git-grep t
               projectile-globally-ignored-file-suffixes '(".elc" ".class" ".pyc" ".o")
               projectile-ignored-projects '("~/" "/tmp")
               projectile-kill-buffers-filter 'kill-only-files
               projectile-files-cache-expire 604800 ; expire after a week
               projectile-sort-order 'recentf
               projectile-switch-project-action 'projectile-dired)
         (global-set-key (kbd "C-x b") 'projectile-switch-to-buffer)
         (global-set-key (kbd "C-c p o") 'projectile-switch-project)
         (global-set-key (kbd "C-c p f") 'projectile-find-file)
         (global-set-key (kbd "C-c p g") 'projectile-grep))
     #+END_SRC
*** Plural 
#+begin_src emacs-lisp
(use-package plural)
#+end_src
*** Terminal
**** Eshell
***** Package
      #+BEGIN_SRC emacs-lisp
        (use-package eshell
          :config
          (setq eshell-buffer-maximum-lines 100000
                eshell-history-size 100000))
      #+END_SRC
***** Utils
#+BEGIN_SRC emacs-lisp
  (defun eshell/clear ()
    (interactive)
    "Clear the eshell buffer."
    (let ((inhibit-read-only t))
      (erase-buffer)))

  (defun eshell/compilation-mode () 
    "Enable compilation mode"
    (interactive)
    ;; compilation shell mode doesn't work properly so it needs a nudge every now and then
    (compilation-shell-minor-mode -1)
    (compilation-shell-minor-mode 1))

  (global-set-key (kbd "C-c k") 'eshell/compilation-mode)
  ;(add-hook 'eshell-post-command-hook 'eshell/compilation-mode)

  (global-set-key (kbd "C-c l") 'eshell/clear)
#+END_SRC
***** Aliases 
      #+BEGIN_SRC emacs-lisp
        (add-hook 'eshell-mode-hook (lambda ()
                                      (eshell/alias "cls" "eshell/clear")
                                      (eshell/alias "clear" "eshell/clear")
                                      (eshell/alias "d" "dired $1")
                                      (eshell/alias "e" "find-file $1")
                                      (eshell/alias "ee" "find-file-other-window $1")
                                      (eshell/alias "emacs" "find-file-other-window $1")
                                      (eshell/alias "ff" "find-file $1")
                                      (eshell/alias "gd" "magit-diff-unstaged")
                                      (eshell/alias "gds" "magit-diff-staged")
                                      (eshell/alias "ll" "ls -AlohG --color=always $*")
                                      (eshell/alias "ls" "TERM=ansi ls --color=always $*")
                                      (eshell/alias "mci" "mvn clean install")
                                      (eshell/alias "vi" "find-file-other-window $1")
                                      (eshell/alias "kc" "kubectl $*")))
      #+END_SRC
***** Visuals
#+begin_src emacs-lisp
        (add-hook 'eshell-mode-hook (lambda ()
                                   (add-to-list 'eshell-visual-commands "ssh")
                                   (add-to-list 'eshell-visual-commands "tail")
                                   (add-to-list 'eshell-visual-commands "docker")
                                   (add-to-list 'eshell-visual-commands "top")))

#+end_src
***** COMMENT Prompt
      #+BEGIN_SRC emacs-lisp
        (defun pwd-replace-home (pwd)
          "Replace home in PWD with tilde (~) character."
          (interactive)
          (let* ((home (expand-file-name (getenv "HOME")))
                 (home-len (length home)))
            (if (and
                 (>= (length pwd) home-len)
                 (equal home (substring pwd 0 home-len)))
                (concat "~" (substring pwd home-len))
              pwd)))

        (defun pwd-shorten-dirs (pwd)
          "Shorten all directory names in PWD except the last two."
          (let ((p-lst (split-string pwd "/")))
            (if (> (length p-lst) 2)
                (concat
                 (mapconcat (lambda (elm) (if (zerop (length elm)) ""
                                            (substring elm 0 1)))
                            (butlast p-lst 2)
                            "/")
                 "/"
                 (mapconcat (lambda (elm) elm)
                            (last p-lst 2)
                            "/"))
              pwd))	)

        (setq eshell-prompt-function (lambda nil
                                       (concat
                                        (propertize (pwd-shorten-dirs (pwd-replace-home (eshell/pwd))) 'face `(:foreground "#528369"))
                                        (propertize "\n" 'face `(:foreground "#c57632"))
                                        (propertize " $ " 'face `(:foreground "#c57632")))))
        (setq eshell-highlight-prompt t)
      #+End_SRC
***** Disable highlighting
      #+BEGIN_SRC emacs-lisp
        (add-hook 'eshell-mode-hook (lambda ()
                                      (setq-local global-hl-line-mode nil)))
      #+END_SRC
***** Auto suggest
      #+BEGIN_SRC emacs-lisp
        (use-package esh-autosuggest
        :hook (eshell-mode . esh-autosuggest-mode))
      #+END_SRC
***** COMMENT Aweshell
#+begin_src emacs-lisp
  (use-package aweshell
        :straight (aweshell :type git :host github :repo "manateelazycat/aweshell"))
#+end_src
***** COMMENT Compilation Mode
#+begin_src emacs-lisp
  (add-hook 'shell-mode-hook 'compilation-shell-minor-mode)
#+end_src
**** COMMENT Mutli-term
     #+BEGIN_SRC emacs-lisp
       (use-package multi-term)
       (defvar multi-term-program "/bin/zsh")
     #+END_SRC
**** COMMENT Ansi-term
     #+BEGIN_SRC emacs-lisp
       (defvar my-term-shell "/bin/zsh")
       (defadvice ansi-term (before force-zsh)
         (interactive (list my-term-shell)))
       (ad-activate 'ansi-term)
     #+END_SRC
**** Terminal Binding
     #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "<S-'>") 'multi-term)
     #+END_SRC
*** Treemacs
    #+BEGIN_SRC emacs-lisp
      (use-package treemacs
	:defer t
	:bind ("M-0" . 'treemacs-select-window)
	:hook (treemacs-mode . (lambda () (setq mode-line-format nil)))
	:config
	(progn
	  (doom-themes-treemacs-config)
	  (setq 
		treemacs-change-root-without-asking t
		treemacs-collapse-dirs              (if (executable-find "python") 3 0)
		treemacs-file-event-delay           5000
		treemacs-follow-after-init          t
		treemacs-follow-recenter-distance   0.1
		treemacs-goto-tag-strategy          'refetch-index
		treemacs-indentation                2
		treemacs-indentation-string         " "
		treemacs-max-git-entries            5000
		treemacs-is-never-other-window      nil
		treemacs-no-png-images              nil 
		treemacs-recenter-after-file-follow t
		treemacs-recenter-after-tag-follow  nil
		treemacs-show-hidden-files          nil 
		treemacs-silent-filewatch           t
		treemacs-silent-refresh             t
		treemacs-sorting                    'alphabetic-desc
		treemacs-tag-follow-cleanup         t
		treemacs-tag-follow-delay           1.5
		treemacs-persist-file              (f-join user-emacs-directory ".cache" "treemacs-persist") 
		treemacs-width                      30)))
	  ;(treemacs-follow-mode t)
	  ;(treemacs-filewatch-mode t)
	  ;(treemacs-fringe-indicator-mode t)
	  ;;an alternative is (treemacs-git-mode 'extended) which is currently slow for large projects.))
	  ;(treemacs-git-mode 'extended)))

      (use-package treemacs-evil :demand t)
      (use-package treemacs-projectile
	:defer t
	:config
	(setq treemacs-header-function #'treemacs-projectile-create-header))

      (defun iocanel/git-p (name path)
	(equal name ".git"))

      (setq treemacs-ignored-file-predicates '(iocanel/git-p))
    #+END_SRC
**** Utilities
#+begin_src emacs-lisp
  (defun iocanel/project-root-dir (buffer)
    "Find the project root of the specified buffer."
    (cond ((or (not buffer) (equal "/" buffer)) nil)
          ((projectile-project-p buffer) buffer)
          (t (iocanel/project-root-dir (file-name-directory (directory-file-name buffer))))))

    (defun iocanel/kill-non-project-buffers ()
      "Kill all buffers that don't belong to a project."
      (interactive)
      (let ((buffers (buffer-list (selected-frame))))
        (dolist (buf buffers)
          (with-current-buffer buf
            (let* ((buf-name (buffer-name buf))
                   (buf-path (buffer-file-name buf))
                   (project-root (iocanel/project-root-dir buf-path)))
                  (if (not project-root)
                  (message "Current buffer: %s is part of: %s. " buf-name project-root))
              (when (and (null (projectile-project-p))
                        (not (string-match "^\*" buf-name)))
                  (message "Killing buffer: %s" buf-name)
                  ;;(kill-buffer buf)
                  ))))))
#+end_src
*** COMMENT Sidebar
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'load-path "~/.local/share/icons-in-terminal/") ;; If it's not already done
      (add-to-list 'load-path "~/workspace/src/github.com/sebastiencs/sidebar.el")
      (require 'sidebar)
      (global-set-key (kbd "C-x C-f") 'sidebar-open)
      (global-set-key (kbd "C-x C-a") 'sidebar-buffers-open)
    #+END_SRC
*** Snippets
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :init
        (setq yas-snippet-dirs
              '("~/.emacs.d/snippets"                 ;; personal snippets
                "~/.config/emacs/snippets"
                "~/.config/emacs/templates")
              yas-prompt-functions '(yas-ido-prompt))
  
        :hook ((text-mode prog-mode org-mode eshell-mode) . yas-minor-mode))

        (use-package yasnippet-snippets :defer t)

      ;; Use yas-indent-line fixed in yaml-mode. This fixes issues with parameter mirroring breaking indentation
      (setq yas-indent-line 'fixed)

      ;; Add yasnippet support for all company backends
      ;; https://github.com/syl20bnr/spacemacs/pull/179
      (defvar company-mode/enable-yas t
        "Enable yasnippet for all backends.")

      (defun company-mode/backend-with-yas (backend)
        (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
            backend
          (append (if (consp backend) backend (list backend))
                  '(:with company-yasnippet))))

      (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
    #+END_SRC
*** COMMENT Slack
#+begin_src emacs-lisp
    (use-package slack
      :commands (slack-start)
      :init
      (setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
      (setq slack-prefer-current-team t)
      (setq slack-modeline t)
      :config
      (slack-register-team
       :name "springcloud"
       :token (replace-regexp-in-string "\n\\'" ""  (shell-command-to-string "pass show websites/slack/springcloud.slack.com/token"))
       :subscribed-channels '(spring-cloud-k8s))

      (slack-register-team
       :name "obsidian-toaster"
       :token (replace-regexp-in-string "\n\\'" ""  (shell-command-to-string "pass show websites/slack/obsidian-toaster.slack.com/token"))
       :modeline-enabled t
       :modeline-name "springboot"
       :subscribed-channels '(springboot))

      (evil-define-key 'normal slack-info-mode-map
        ",u" 'slack-room-update-messages)
      (evil-define-key 'normal slack-mode-map
        ",c" 'slack-buffer-kill
        ",ra" 'slack-message-add-reaction
        ",rr" 'slack-message-remove-reaction
        ",rs" 'slack-message-show-reaction-users
        ",pl" 'slack-room-pins-list
        ",pa" 'slack-message-pins-add
        ",pr" 'slack-message-pins-remove
        ",mm" 'slack-message-write-another-buffer
        ",me" 'slack-message-edit
        ",md" 'slack-message-delete
        ",u" 'slack-room-update-messages
        ",2" 'slack-message-embed-mention
        ",3" 'slack-message-embed-channel
        "\C-n" 'slack-buffer-goto-next-message
        "\C-p" 'slack-buffer-goto-prev-message)
       (evil-define-key 'normal slack-edit-message-mode-map
        ",k" 'slack-message-cancel-edit
        ",s" 'slack-message-send-from-buffer
        ",2" 'slack-message-embed-mention
        ",3" 'slack-message-embed-channel))

  (add-to-list
   'alert-user-configuration
   '(((:message . "@iocanel\\|Ioannis")
      (:title . "\\(2-springboot\\|spring-cloud-k8s\\)")
      (:category . "slack"))
     libnotify nil))

   (evil-leader/set-key "a s" 'slack-start)

#+end_src
*** COMMENT Stack Exchange
**** Package
    #+BEGIN_SRC emacs-lisp
      (use-package sx
        :config
        (bind-keys :prefix "C-c s"
                   :prefix-map my-sx-map
                   :prefix-docstring "Global keymap for SX."
                   ("q" . sx-tab-all-questions)
                   ("i" . sx-inbox)
                   ("o" . sx-open-link)
                   ("u" . sx-tab-unanswered-my-tags)
                   ("a" . sx-ask)
                   ("s" . sx-search)))
    #+END_SRC
**** Evil Configuration
***** Questions
      #+BEGIN_SRC emacs-lisp
        (define-minor-mode sx-evil-question-mode
          "Overrides SX related keys for question mode"
          :global nil)

        (defvar sx-evil-question-map (make-sparse-keymap "sx-evil-question-map")
          "Override all major and minor mode keys")

        (add-to-list 'emulation-mode-map-alists
                     `((sx-evil-question-mode . ,sx-evil-question-map)))


        (define-key sx-evil-question-map (kbd "<RET>") 'sx-display)
        (define-key sx-evil-question-map "a" 'sx-answer)
        (define-key sx-evil-question-map "c" 'sx-comment)
        (define-key sx-evil-question-map "O" 'sx-question-list--interactive-order-prompt)
        (define-key sx-evil-question-map "*" 'sx-star)
        (define-key sx-evil-question-map "e" 'sx-edit)
        (define-key sx-evil-question-map "d" 'sx-downvote)
        (define-key sx-evil-question-map "u" 'sx-upvote)
        (define-key sx-evil-question-map "q" 'quit-window)

        (evil-make-intercept-map sx-evil-question-map)
        (add-hook 'sx-question-mode-hook 'sx-evil-question-mode)
      #+END_SRC
***** Question List
      #+BEGIN_SRC emacs-lisp
        (define-minor-mode sx-evil-question-list-mode
          "Overrides SX related keys for question list mode"
          :global nil)

        (defvar sx-evil-question-list-map (make-sparse-keymap "sx-evil-question-list-map")
          "Override all major and minor mode keys")

        (add-to-list 'emulation-mode-map-alists
                     `((sx-evil-question-list-mode . ,sx-evil-question-list-map)))
        (define-key sx-evil-question-list-map (kbd "<RET>") 'sx-display)
        (define-key sx-evil-question-list-map "a" 'sx-ask)
        (define-key sx-evil-question-list-map "h" 'sx-question-list-hide)
        (define-key sx-evil-question-list-map "m" 'sx-question--mark-read)
        (define-key sx-evil-question-list-map "S" 'sx-search)
        (define-key sx-evil-question-list-map "s" 'sx-question-list-switch-site)
        (define-key sx-evil-question-list-map "t" 'sx-tab-switch)
        (define-key sx-evil-question-list-map "v" 'sx-visit-externally)
        (define-key sx-evil-question-list-map "q" 'quit-window)

        (evil-make-intercept-map sx-evil-question-list-map)
        (add-hook 'sx-question-list-mode-hook 'sx-evil-question-list-mode)

      #+END_SRC
***** Inbox
      #+BEGIN_SRC emacs-lisp
        (define-minor-mode sx-evil-inbox-mode
          "Overrides SX related keys for inbox mode"
          :global nil)

        (defvar sx-evil-inbox-map (make-sparse-keymap "sx-evil-inbox-map")
          "Override all major and minor mode keys")

        (add-to-list 'emulation-mode-map-alists
                     `((sx-evil-inbox-mode . ,sx-evil-inbox-map)))
        (define-key sx-evil-inbox-map (kbd "<RET>") 'sx-display)
        (define-key sx-evil-inbox-map "v" 'sx-visit-externally)
        (define-key sx-evil-inbox-map "q" 'quit-window)

        (evil-make-intercept-map sx-evil-inbox-map)
        (add-hook 'sx-inbox-mode-hook 'sx-evil-inbox-mode)

      #+END_SRC

     #+BEGIN_SRC emacs-lisp
     #+END_SRC
*** Version Control
**** Magit
     #+BEGIN_SRC emacs-lisp
       (use-package magit
         :config
         (setq ediff-multiframe nil)
         (setq-default ediff-window-setup-function 'ediff-setup-windows-plain))

       (use-package evil-magit)

       ;; Key bindings
       (global-set-key (kbd "C-c g s") 'magit-status)
     #+END_SRC
**** Forge
#+begin_src emacs-lisp
       (use-package forge
         :straight (forge :type git :host github :repo "magit/forge"))

  ;; Let's overide the way that handle the token
  (defun ghub--token (host username package &optional nocreate forge)
    (replace-regexp-in-string "\n\\'" ""  (shell-command-to-string (format "pass show %s/%s" host username))))

#+end_src
**** COMMENT Check pull request status
This is currently work in prgoress.
It's inspired by:
And goes like this:
#+begin_src emacs-lisp
(defun github-get-prs ()
  (let ((repo (ghub-get "<my-repository>"))
        (user "<my-username>"))
    (defun ref-to-status (ref)
      (list ref
            (with-timeout (3 "failure")
              (cdr (assoc 'state (ghubp-get-repos-owner-repo-commits-ref-status repo ref))))))
    (mapcar
     #'ref-to-status
     (mapcar
      (lambda (pr) (cdr (assoc 'ref (assoc 'head pr))))
      (-filter
       (lambda (pr) (s-equals-p user (cdr (assoc 'login (assoc 'user pr)))))
       (ghubp-unpaginate (ghubp-get-repos-owner-repo-pulls repo)))))))
#+end_src
Possible improvements:

- integration with projectile (enable on project open etc)
- auto detect repository
- auto detect username?

**** Orgit
Orgit adds supports for usign `org-links` with magit buffers.
This is really useful for capturing github issues, pull requests and so on.

#+begin_src emacs-lisp
(use-package orgit
         :straight (orgit :type git :host github :repo "magit/orgit" :branch "forge"))
#+end_src
**** Git timemachine
     Allows you a buffer to move back in time (previous commits)
***** Package     
      #+BEGIN_SRC emacs-lisp
        (use-package git-timemachine
          :config
          (global-set-key (kbd "C-c g t") 'git-timemachine-toggle))
      #+END_SRC
***** Hooks
      #+BEGIN_SRC emacs-lisp
        (eval-after-load 'git-timemachine
          '(progn
             (evil-make-overriding-map git-timemachine-mode-map 'normal)
             ;; force update evil keymaps after git-timemachine-mode loaded
             (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps)))
      #+END_SRC
***** Hydras
      #+BEGIN_SRC emacs-lisp
        (defhydra hydra-git-timemachine ()
          "Git timemachine"
          ("p" git-timemachine-show-previous-revision "previous revision")
          ("n" git-timemachine-show-next-revision "next revision")
          ("q" nil "quit"))
      #+END_SRC
**** Git gutter
     Displays marks on the left bar about changes since last commit.
     #+BEGIN_SRC emacs-lisp
       (use-package git-gutter-fringe)
       ;; We don't want this on non programming modes
       (add-hook 'prog-mode-hook (lambda () (git-gutter-mode)))
     #+END_SRC
**** Github
***** Github Pull Request
      #+BEGIN_SRC emacs-lisp
        (use-package github-pullrequest)
      #+END_SRC
***** Github Issues
      #+BEGIN_SRC emacs-lisp
        (use-package github-issues)
      #+END_SRC
**** Browse at remote
#+begin_src emacs-lisp
  (use-package browse-at-remote)
(global-set-key (kbd "C-c g g") 'browse-at-remote)
#+end_src
** Modes
*** Org Mode
#+begin_src emacs-lisp
(setq org-modules '(org-w3m org-bbdb org-bibtex org-docview org-gnus org-info org-irc org-mhe org-rmail org-eww))
#+end_src
**** Agenda
     #+BEGIN_SRC emacs-lisp
       (require 'org-agenda)
       (setq org-agenda-files (list "~/Documents/calendars/personal.org"
                                    "~/Documents/calendars/work.org"
                                    "~/Documents/notes/personal.org"
                                    "~/Documents/notes/work.org"
                                    "~/Documents/notes/todo.org"
                                    "~/Documents/notes/schedule.org"
                                    "~/Documents/notes/jira/"))

       (define-key global-map "\C-ca" 'org-agenda)
       (evil-leader/set-key "a a" 'org-agenda)
     #+END_SRC
**** Babel
     #+BEGIN_SRC emacs-lisp
       (use-package org
         :config
         (org-babel-do-load-languages 'org-babel-load-languages
                                      '((shell      . t)
                                        (groovy     . t)
                                        (java       . t)
                                        (clojure    . t)
                                        (js         . t)
                                        (emacs-lisp . t)
                                        (python     . t))))
     #+END_SRC
**** Bullets
     To replace ascii asterisks with bullets:    
     #+BEGIN_SRC emacs-lisp
       (use-package org-bullets
         :hook (org-mode . org-bullets-mode))
     #+END_SRC
**** Blogging
***** Installation
To install the org2blog plugin:
      #+BEGIN_SRC emacs-lisp
        (use-package org2blog)
      #+END_SRC
***** Setup
      #+BEGIN_SRC emacs-lisp
        (defun iocanel/org2blog-init ()
          (setq org2blog/wp-use-sourcecode-shortcode t)
          (setq org2blog/wp-blog-alist
                `(("iocanel.com"
                   :url "https://iocanel.com/xmlrpc.php"
                   :username "iocanel@gmail.com"
                   :password ,(replace-regexp-in-string "\n\\'" ""  (shell-command-to-string "pass show websites/iocanel.com/iocanel@gmail.com"))))))

        (add-hook 'emacs-startup-hook 'iocanel/org2blog-init)

      #+END_SRC      
***** Troubleshooting
****** Symbolâ€™s function definition is void: org-define-error
       Issue and workaround can be found at: https://github.com/eschulte/epresent/issues/61
       #+BEGIN_SRC emacs-lisp
         (define-obsolete-function-alias 'org-define-error 'define-error)
       #+END_SRC
**** Capture
     #+BEGIN_SRC emacs-lisp
       (setq org-capture-templates
             '(
               ("l" "Link" entry (file+headline "~/Documents/notes/links.org" "Links") "* %? %^L %^g \n%T" :prepend t)
               ("n" "Note" entry (file+headline "~/Documents/notes/todo.org" "Notes") "* %?\n%u" :prepend t)
               ("j" "Journal" entry (file+datetree "~/Documents/notes/journal.org" "Journal") (file "~/.config/emacs/journal.orgtmpl"))
               ("s" "Status Roll" entry (file+datetree "~/Documents/notes/status-roll.org" "Status Roll") (file "~/.config/emacs/status-roll.orgtmpl"))

               ("c" "Calendar")
               ("cw" "Work Event" entry (file  "~/Documents/calendars/work.org") "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
               ("cp" "Personal Event" entry (file  "~/Documents/calendars/personal.org") "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")

               ("t" "To Do")
               ("tw" "Work To Do Item" entry (file+headline "~/Documents/notes/work.org" "To Do") "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n" :prepend t)
               ("tp" "Personal To Do Item" entry (file+headline "~/Documents/notes/personal.org" "To Do") "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n" :prepend t)


               ("q" "Quotes" entry (file+headline "~/Documents/notes/quotes.org" "Quotes") "* %?\n%u" :prepend t)
               ("f" "Flashcards")
               ("fe" "Emacs") 
               ("fef" "Emacs facts"  entry (file+headline "~/Documents/flashcards/emacs.org" "Emacs") "* Fact :drill:\n %t\n %^{The fact}\n")
               ("feq" "Emacs questions"  entry (file+headline "~/Documents/flashcards/emacs.org" "Emacs") "* Question :drill:\n %t\n %^{The question} \n** Answer: \n%^{The answer}")
               ("fh" "History") 
               ("fhf" "History facts"  entry (file+headline "~/Documents/flashcards/history.org" "History") "* Fact :drill:\n %t\n %^{The fact}\n")
               ("fhq" "History questions"  entry (file+headline "~/Documents/flashcards/history.org" "History") "* Question :drill:\n %t\n %^{The question} \n** Answer: \n%^{The answer}")
               ("fm" "Maths")
               ("fmf" "Math facts"  entry (file+headline "~/Documents/flashcards/maths.org" "Maths") "* Fact :drill:\n %t\n %^{The fact}\n")
               ("fmq" "Math questions"  entry (file+headline "~/Documents/flashcards/maths.org" "Maths") "* Question :drill:\n %t\n %^{The question} \n** Answer: \n%^{The answer}")
               ("fc" "Computer Science")
               ("fcf" "Computer Science facts"  entry (file+headline "~/Documents/flashcards/computer-science.org" "Computer Science") "* Fact :drill:\n %t\n %^{The fact}\n")
               ("fcq" "Computer Science questions"  entry (file+headline "~/Documents/flashcards/computer-science.org" "Computer Science") "* Question :drill:\n %t\n %^{The question} \n** Answer: \n%^{The answer}")
               ("fs" "Sports")
               ("fsf" "Sports facts"  entry (file+headline "~/Documents/flashcards/sports.org" "Sports") "* Fact :drill:\n %t\n %^{The fact}\n")
               ("fsq" "Sports questions"  entry (file+headline "~/Documents/flashcards/sports.org" "Sports") "* Question :drill:\n %t\n %^{The question} \n** Answer: \n%^{The answer}")
               ("fn" "Nutrition") 
               ("fnf" "Nutrition facts"  entry (file+headline "~/Documents/flashcards/nutrition.org" "Nutrition") "* Fact :drill:\n %t\n %^{The fact}\n")
               ("fnq" "Nutrition questions"  entry (file+headline "~/Documents/flashcards/nutrition.org" "Nutrition") "* Question :drill:\n %t\n %^{The question} \n** Answer: \n%^{The answer}")
               ("fl" "Languages")
               ("fls" "Spanish"  entry (file+headline "~/Documents/flashcards/languages/spanish.org" "Spanish") "* Question :drill:\n %t\n %^{The question} \n** Answer: \n%^{The answer}")))
       (define-key global-map "\C-cc" 'org-capture)
       (evil-leader/set-key "c" 'org-capture)
     #+END_SRC
**** Code blocks
***** Edit code in a new window
      By pressing (C-c ') you can edit the code in a new buffer.
      #+BEGIN_SRC emacs-lisp
        (setq org-src-window-setup 'current-window)
      #+END_SRC    
***** Code block identation
      #+BEGIN_SRC emacs-lisp
        (setq org-src-tab-acts-natively t)
      #+END_SRC
***** Babel packs
      #+BEGIN_SRC emacs-lisp
        (use-package ob-go)
        (use-package ob-typescript)
      #+END_SRC
**** Drill
#+begin_src emacs-lisp
  ;;This is an org-drill fork that contains the fixes:
  ;; 1. for the `Invalid match tag: ""`.
  ;; 2. missing org-learn
  (use-package org-drill
            :straight (org-drill :type git :host github :repo "iocanel/org-drill")
            :config
            (setq org-drill-scope 'directory))
#+end_src
**** Evil
     #+BEGIN_SRC emacs-lisp
       (use-package evil-org
         :after org
         :hook ((org-mode . evil-org-mode)
                (evil-org-mode . (lambda () (evil-org-set-key-theme)))
                (agenda-mode . (evil-org-agenda-set-keys))))
       ;  :config
       ;  (add-hook 'org-mode-hook 'evil-org-mode)
       ;  (add-hook 'evil-org-mode-hook (lambda () (evil-org-set-key-theme)))
       ;  (require 'evil-org-agenda)
       ;  (evil-org-agenda-set-keys))

       ;;Open org-links in evil mode
       (define-key global-map "\C-co" 'evil-org-open-links)
       (evil-leader/set-key "o" 'evil-org-open-links)
     #+END_SRC
**** Export Formats
***** asciidoc
      #+BEGIN_SRC emacs-lisp
        (use-package ox-asciidoc)
      #+END_SRC
***** markdown
      #+BEGIN_SRC emacs-lisp
        (use-package ox-gfm)
      #+END_SRC
**** COMMENT Google Calendar
I need to deal with two problems:

1) my work account can't be controlled from my personal account.
2) org-gcal doesn't support multiple accounts yet.

So I controlling my personal calendar from my work calendar and I configure org-gcal to work with my work calendar.
     #+BEGIN_SRC emacs-lisp
       (use-package org-gcal
         :straight (org-gcal :type git :host github :repo "iocanel/org-gcal.el"))


       (defun iocanel/org-gcal-init ()
                 (setq org-gcal-client-id (replace-regexp-in-string "\n\\'" ""  (shell-command-to-string "pass show services/google/vdirsyncer/ikanello@redhat.com/client-id"))
                       org-gcal-client-secret (replace-regexp-in-string "\n\\'" ""  (shell-command-to-string "pass show services/google/vdirsyncer/ikanello@redhat.com/secret"))
                       org-gcal-file-alist '(("iocanel@gmail.com" .  "~/Documents/calendars/personal.org")
                                             ("ikanello@redhat.com" . "~/Documents/calendars/work.org"))))

       (add-hook 'emacs-startup-hook 'iocanel/org-gcal-init)
     #+END_SRC
     If token expires it is you'll start having http 400 errors. To fix just do a simple: org-gcal-refresh-token!
***** COMMENT Calendar Hooks
At the moment running org-gcal-sync after agenda and capture has a high chance to mess with my current buffer
#+begin_src emacs-lisp
       (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync)))
       (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync)))
#+end_src
**** Indent
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda () (org-indent-mode)))
#+END_SRC
**** COMMENT Jira
***** package
     #+BEGIN_SRC emacs-lisp
       (defun org-jira-login()
         (interactive)
         (let ((jira-password (replace-regexp-in-string "\n\\'" ""  (shell-command-to-string "pass show websites/jboss.org/iocanel"))))
           (jiralib-login "iocanel" jira-password)))

       (use-package org-jira
         
         :config
         (org-jira-login))

       (setq jiralib-url "https://issues.jboss.org/")
       (setq jiralib-user-login-name "iocanel")
       (setq org-jira-working-dir "~/Documents/notes/jira")
     #+END_SRC
***** customizations
      #+BEGIN_SRC emacs-lisp
                 (defvar org-jira-selected-board nil)
                 (defvar org-jira-selected-sprint nil)
                 (defvar org-jira-selected-epic nil)

                 (defvar org-jira-boards-cache ())
                 (defvar org-jira-sprint-by-board-cache ())
                 (defvar org-jira-epic-by-board-cache ())

                 ;;
                 ;; Boards
                 ;;
                 (defun org-jira-list-boards()
                   "List all boards."
                   (unless org-jira-boards-cache
                     (setq org-jira-boards-cache (jiralib--agile-call-sync "/rest/agile/1.0/board" 'values)))
                   org-jira-boards-cache)

                 (defun org-jira-get-board-id()
                   "Select a board if one not already selected."
                   (unless org-jira-selected-board
                     (setq org-jira-selected-board (org-jira-board-completing-read)))
                     (cdr (assoc 'id org-jira-selected-board)))

                 (defun org-jira-get-board()
                   "Select a board if one not already selected."
                   (unless org-jira-selected-board
                     (setq org-jira-selected-board (org-jira-board-completing-read)))
                     org-jira-selected-board)

                 (defun org-jira-select-board()
                   "Select a board."
                   (interactive)
                  (setq org-jira-selected-board (org-jira-board-completing-read)))

                 (defun org-jira-board-completing-read()
                   "Select a board by name."
                   (interactive)
                   (let* ((boards (org-jira-list-boards))
                          (board-names (mapcar #'(lambda (a) (cdr (assoc 'name a))) boards))
                          (board-name (completing-read "Choose board:" board-names)))
                     (car (seq-filter #'(lambda (a) (equal (cdr (assoc 'name a)) board-name)) boards))))

                 ;;
                 ;; Sprint
                 ;;
                 (defun org-jira-get-project-boards(project-id)
                   "Find the board of the project.")

                 (defun org-jira-get-sprints-by-board(board-id &optional filter)
                   "List all sprints by BOARD-ID."
                   (interactive)
                   (let ((board-sprints-cache (cdr (assoc board-id org-jira-sprint-by-board-cache))))
                     (unless board-sprints-cache
                       (setq board-sprints-cache (jiralib--agile-call-sync (format "/rest/agile/1.0/board/%s/sprint" board-id)'values)))

                     (add-to-list 'org-jira-sprint-by-board-cache `(,board-id . ,board-sprints-cache))
                     (if filter
                         (seq-filter filter board-sprints-cache)
                       board-sprints-cache)))

                 (defun org-jira--active-sprint-p(sprint)
                   "Predicate that checks if SPRINT is active."
                   (not (assoc 'completeDate sprint)))


                 (defun org-jira-sprint-completing-read(board-id)
                   "Select an active sprint by name."
                   (let* ((sprints (org-jira-get-sprints-by-board board-id 'org-jira--active-sprint-p))
                          (sprint-names (mapcar #'(lambda (a) (cdr (assoc 'name a))) sprints))
                          (sprint-name (completing-read "Choose sprint:" sprint-names)))
                     (car (seq-filter #'(lambda (a) (equal (cdr (assoc 'name a)) sprint-name)) sprints))))

                 (defun org-jira-move-issue-to-sprint(issue-id sprint-id)
                   "Move issue with ISSUE-ID to sprint with SPRINT-ID."
                         (jiralib--rest-call-it (format "/rest/agile/1.0/sprint/%s/issue" sprint-id) :type "POST" :data (format "{\"issues\": [\"%s\"]}" issue-id)))

                 (defun org-jira-assign-current-issue-to-sprint()
                   "Move the selected issue to an active sprint."
                   (interactive)
                   (let* ((issue-id (org-jira-parse-issue-id))
                          (board-id (cdr (assoc 'id (org-jira-get-board))))
                          (sprint-id (cdr (assoc 'id (org-jira-sprint-completing-read board-id)))))

                     (org-jira-move-issue-to-sprint issue-id sprint-id)))

                 (defun org-jira-get-sprint-id()
                   "Select a sprint id if one not already selected."
                   (unless org-jira-selected-sprint
                     (setq org-jira-selected-sprint (org-jira-sprint-completing-read)))
                     (cdr (assoc 'id org-jira-selected-sprint)))

                 (defun org-jira-get-sprint()
                   "Select a sprint if one not already selected."
                   (unless org-jira-selected-sprint
                     (setq org-jira-selected-sprint (org-jira-select-sprint)))
                     org-jira-selected-sprint)

                 (defun org-jira-select-sprint()
                   "Select a sprint."
                   (interactive)
                  (setq org-jira-selected-sprint (org-jira-sprint-completing-read (org-jira-get-board-id))))
                 ;;
                 ;; Epics
                 ;;

                 (defun org-jira-get-epics-by-board(board-id &optional filter)
                   "List all epics by BOARD-ID."
                   (interactive)
                   (let ((board-epics-cache (cdr (assoc board-id org-jira-epic-by-board-cache))))
                     (unless board-epics-cache
                       (setq board-epics-cache (jiralib--agile-call-sync (format "/rest/agile/1.0/board/%s/epic" board-id)'values)))

                     (add-to-list 'org-jira-epic-by-board-cache `(,board-id . ,board-epics-cache))
                     (if filter
                         (seq-filter filter board-epics-cache)
                       board-epics-cache)))

                 (defun org-jira--active-epic-p(epic)
                   "Predicate that checks if EPIC is active."
                   (not (equal (assoc 'done epic) 'false)))


                 (defun org-jira-epic-completing-read(board-id)
                   "Select an active epic by name."
                   (let* ((epics (org-jira-get-epics-by-board board-id 'org-jira--active-epic-p))
                          (epic-names (mapcar #'(lambda (a) (cdr (assoc 'name a))) epics))
                          (epic-name (completing-read "Choose epic:" epic-names)))
                     (car (seq-filter #'(lambda (a) (equal (cdr (assoc 'name a)) epic-name)) epics))))

                 (defun org-jira-move-issue-to-epic(issue-id epic-id)
                   "Move issue with ISSUE-ID to epic with SPRINT-ID."
                         (jiralib--rest-call-it (format "/rest/agile/1.0/epic/%s/issue" epic-id) :type "POST" :data (format "{\"issues\": [\"%s\"]}" issue-id)))

                 (defun org-jira-assign-current-issue-to-epic()
                   "Move the selected issue to an active epic."
                   (interactive)
                   (let* ((issue-id (org-jira-parse-issue-id))
                          (board-id (cdr (assoc 'id (org-jira-get-board))))
                          (epic-id (cdr (assoc 'id (org-jira-epic-completing-read board-id)))))

                     (org-jira-move-issue-to-epic issue-id epic-id)))

                 (defun org-jira-get-epic-id()
                   "Select a epic id if one not already selected."
                   (unless org-jira-selected-epic
                     (setq org-jira-selected-epic (org-jira-epic-completing-read)))
                     (cdr (assoc 'id org-jira-selected-epic)))

                 (defun org-jira-get-epic()
                   "Select a epic if one not already selected."
                   (unless org-jira-selected-epic
                     (setq org-jira-selected-epic (org-jira-select-epic)))
                     org-jira-selected-epic)

                 (defun org-jira-select-epic()
                   "Select a epic."
                   (interactive)
                  (setq org-jira-selected-epic (org-jira-epic-completing-read (org-jira-get-board-id))))

                 (defun org-jira-create-issue-with-defaults()
                   "Create an issue and assign to default sprint and epic."
                   (org-jira-create-issue)
                   (org-jira-move-issue-to-epic)
                   (org-jira-move-issue-to-sprint))

                 ;;
                 ;; Populate caches
                (async-start (progn
                 ;;              (jiralib-get-users "SB")
                 ;;              (org-jira-list-boards)
                ))

      #+END_SRC
***** hydra
      #+BEGIN_SRC emacs-lisp

        (defhydra org-jira-hydra (:hint nil :exit t)
          ;; The '_' character is not displayed. This affects columns alignment.
          ;; Remove s many spaces as needed to make up for the '_' deficit.
          "
                 ^Actions^           ^Issue^              ^Buffer^                         ^Defaults^ 
                 ^^^^^^-----------------------------------------------------------------------------------------------
                  _L_ist issues      _u_pdate issue       _R_efresh issues in buffer       Select _B_oard 
                  _C_reate issue     update _c_omment                                    Select _E_pic
                                   assign _s_print                                     Select _S_print
                                   assign _e_print                                     Create issue with _D_efaults
                                   _b_rowse issue
                                   _r_efresh issue
                                   _p_rogress issue
                 "
          ("L" org-jira-get-issues)
          ("C" org-jira-create-issue)

          ("u" org-jira-update-issue)
          ("c" org-jira-update-comment)
          ("b" org-jira-browse-issue)
          ("s" org-jira-assign-current-issue-to-sprint)
          ("e" org-jira-assign-current-issue-to-epic)
          ("r" org-jira-refresh-issue)
          ("p" org-jira-progress-issue)

          ("R" org-jira-refresh-issues-in-buffer)

          ("B" org-jira-select-board)
          ("E" org-jira-select-epic)
          ("S" org-jira-select-sprint)
          ("D" org-jira-create-with-defaults)

          ("q" nil "quit"))

        (evil-leader/set-key "j" 'org-jira-hydra/body)
      #+END_SRC

**** Presentations
***** org-present
      #+BEGIN_SRC emacs-lisp
        (use-package org-present)

        (add-hook 'org-present-mode-hook
                  (lambda ()
                    (org-present-big)
                    (org-display-inline-images)
                    (org-present-hide-cursor)
                    (hide-mode-line-mode)
                    (flyspell-mode -1)
                    (org-present-read-only)))
        (add-hook 'org-present-mode-quit-hook
                  (lambda ()
                    (org-present-small)
                    (org-remove-inline-images)
                    (org-present-show-cursor)
                    (hide-mode-line-reset)
                    (flyspell-mode 1)
                    (org-present-read-write)))


        (evil-leader/set-key "p s" 'org-present)
        (evil-leader/set-key "p q" 'org-present-quit)
        (define-key org-present-mode-keymap (kbd "C-c l") 'org-present-next)
        (define-key org-present-mode-keymap (kbd "C-c h") 'org-present-prev)
      #+END_SRC
***** COMMENT org-tree-slide
#+BEGIN_SRC emacs-lisp
  (use-package org-tree-slide
    :config
    (setq org-tree-slide-header nil
          org-tree-slide-title nil))

  (use-package moom
    
    :config
    (setq moom-frame-width-single 200))


  (add-hook 'org-tree-slide-mode-play-hook (lambda ()
                                             (moom-toggle-frame-maximized)
                                             (hide-mode-line-mode)
                                             (flyspell-mode -1)
                                             (org-present-hide-cursor)
                                             (beacon-mode -1)))

  (add-hook 'org-tree-slide-mode-stop-hook (lambda ()
                                             (moom-toggle-frame-maximized)
                                             (hide-mode-line-mode)
                                             (flyspell-mode 1)
                                             (org-present-show-cursor)
                                             (beacon-mode 1)))
#+END_SRC
***** ox-reveal
      #+BEGIN_SRC emacs-lisp
        (use-package ox-reveal)
      #+END_SRC
**** Templates
      #+BEGIN_SRC emacs-lisp
        (setq org-structure-template-alist  '(("a" . "export ascii") ("c" . "center") ("C" . "comment") ("e" . "example") ("E" . "export") ("h" . "export html") ("l" . "export latex") ("q" . "quote") ("s" . "src") ("v" . "verse")))
      #+END_SRC
** Development
*** Tools
**** Flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        
        :init (setq flycheck-indication-mode 'right-fringe)
        :hook (prog-mode . flycheck-mode))
    #+END_SRC
**** COMMENT Realgud
     #+BEGIN_SRC emacs-lisp
       (use-package realgud)
     #+END_SRC
*** Languages and Frameworks
**** COMMENT Angular
    #+BEGIN_SRC emacs-lisp
      (use-package ng2-mode)
    #+END_SRC
**** COMMENT Clojure
     Most of the clojure configuration comes from: https://github.com/howardabrams/dot-files/blob/master/emacs-clojure.org
***** clojure-mode
      #+BEGIN_SRC emacs-lisp
        (use-package clojure-mode
          
          :init
          (defconst clojure--prettify-symbols-alist
            '(("fn"   . ?Î»)))
          :config
          (add-hook 'clojure-mode-hook 'global-prettify-symbols-mode)
          :bind (("C-c d f" . cider-code)
                 ("C-c d g" . cider-grimoire)
                 ("C-c d w" . cider-grimoire-web)
                 ("C-c d c" . clojure-cheatsheet)
                 ("C-c d d" . dash-at-point)))
      #+END_SRC
***** cider
      #+BEGIN_SRC emacs-lisp
        (use-package cider
          :commands (cider cider-connect cider-jack-in)

          :init
          (setq cider-auto-select-error-buffer t
                cider-repl-pop-to-buffer-on-connect nil
                cider-repl-use-clojure-font-lock t
                cider-repl-wrap-history t
                cider-repl-history-size 1000
                cider-show-error-buffer t
                nrepl-hide-special-buffers t
                ;; Stop error buffer from popping up while working in buffers other than the REPL:
                nrepl-popup-stacktraces nil)

          ;; (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
          (add-hook 'cider-mode-hook 'company-mode)

          (add-hook 'cider-repl-mode-hook 'paredit-mode)
          (add-hook 'cider-repl-mode-hook 'superword-mode)
          (add-hook 'cider-repl-mode-hook 'company-mode)
          (add-hook 'cider-test-report-mode 'jcf-soft-wrap)

          :bind (:map cider-mode-map
                 ("C-c C-v C-c" . cider-send-and-evaluate-sexp)
                 ("C-c C-p"     . cider-eval-print-last-sexp)))
      #+END_SRC
***** paredit
      #+BEGIN_SRC emacs-lisp
        (use-package paredit
          
          :bind ("M-^" . paredit-delete-indentation)
          :bind ("C-^" . paredit-remove-newlines)
          :init
          (add-hook 'clojure-mode-hook 'paredit-mode))

        (defun paredit-delete-indentation (&optional arg)
          "Handle joining lines that end in a comment."
          (interactive "*P")
          (let (comt)
            (save-excursion
              (move-beginning-of-line (if arg 1 0))
              (when (skip-syntax-forward "^<" (point-at-eol))
                (setq comt (delete-and-extract-region (point) (point-at-eol)))))
            (delete-indentation arg)
            (when comt
              (save-excursion
                (move-end-of-line 1)
                (insert " ")
                (insert comt)))))

        (defun paredit-remove-newlines ()
          "Removes extras whitespace and newlines from the current point
        to the next parenthesis."
          (interactive)
          (let ((up-to (point))
                (from (re-search-forward "[])}]")))
             (backward-char)
             (while (> (point) up-to)
               (paredit-delete-indentation))))

      #+END_SRC
***** flycheck
      #+BEGIN_SRC emacs-lisp
        (use-package flycheck-clojure
          
          :init
          (add-hook 'after-init-hook 'global-flycheck-mode)
          :config
          (use-package flycheck
            :config
            (flycheck-clojure-setup)))

        (use-package flycheck-pos-tip
          
          :config
          (use-package flycheck
            :config
            (setq flycheck-display-errors-function 'flycheck-pos-tip-error-messages)))
      #+END_SRC
***** openscad
      #+BEGIN_SRC emacs-lisp
        (defun spit-scad-last-expression ()
          (interactive)
          (cider-interactive-eval
           (format
            "(require 'scad-clj.scad)
              (spit \"repl.scad\"
                    (scad-clj.scad/write-scad %s))"
            (cider-last-sexp))))
      #+END_SRC
**** Elisp
***** COMMENT elsip-mode
#+BEGIN_SRC emacs-lisp
  (use-package lisp-mode 
    :init (defconst lisp--prettify-symbols-alist '(("lambda"  . ?Î»)))
    :bind (("C-c e i" . ielm))
    :hook (emacs-lisp-mode . (global-prettify-symbols-mode turn-on-eldoc-mode activate-aggresive-indent))
    :config
    (bind-keys :map emacs-lisp-mode-map :prefix-map lisp-find-map :prefix "C-h e"
               ("e" . view-echo-area-messages)
               ("f" . find-function)
               ("k" . find-function-on-key)
               ("l" . find-library)
               ("v" . find-variable)
               ("V" . apropos-value))
    (dolist (m (list emacs-lisp-mode-map lisp-interaction-mode-map))
      (bind-keys :map m :prefix-map lisp-evaluation-map :prefix "C-c e"
                 ("b" . eval-buffer)
                 ("r" . eval-region)
                 ("c" . eval-and-comment-output)
                 ("o" . eval-and-comment-output)
                 ("d" . toggle-debug-on-error)
                 ("f" . emacs-lisp-byte-compile-and-load)))) 
#+END_SRC
***** hydra
     #+BEGIN_SRC emacs-lisp
       (defhydra elisp-hydra (:hint nil :exit t)
         ;; The '_' character is not displayed. This affects columns alignment.
         ;; Remove s many spaces as needed to make up for the '_' deficit.
         "
                ^Edit^                           ^Test or Task^                       ^Navigation^
                ^^^^^^-----------------------------------------------------------------------------------------------
                 _o_: eval-and-comment-output    _b_: eval-buffer                       _f_: find-function
                 _G_: magit-status               _r_: eval-region                       _k_: find-function-on-key
                                               _f_: emacs-lisp-byte-compile-and-load  _l_: find-library
                                                                                    _v_: find-variable
                "
                                               ; Edit
         ("o" eval-and-comment-output)
         ("G" magit-status)
                                               ; Task
         ("b" eval-buffer)
         ("r" eval-region)
                                               ; Navifation
         ("f" find-function)
         ("k" find-function-on-key)
         ("l" find-library)
         ("v" find-variable)
         ("q" nil "quit"))

       (evil-leader/set-key "l" 'elisp-hydra/body)
     #+END_SRC
**** Go
***** Go Mode
     #+BEGIN_SRC emacs-lisp
       (use-package go-mode)
       (require 'go-mode)
       (add-hook 'before-save-hook 'gofmt-before-save)
     #+END_SRC
***** Completion
***** Package
      #+BEGIN_SRC emacs-lisp
        (use-package company-go
          
          :init
          (add-hook 'go-mode-hook (lambda ()
                                    (set (make-local-variable 'company-backends) '(company-go))
                                    (company-mode))))
      #+END_SRC
***** Depenendencies
     Install the following using from the command line:
     #+BEGIN_SRC shell
       go get -u -v github.com/nsf/gocode
       go get -u -v github.com/rogpeppe/godef
       go get -u -v golang.org/x/tools/cmd/guru
       go get -u -v golang.org/x/tools/cmd/gorename
       go get -u -v golang.org/x/tools/cmd/goimports
     #+END_SRC
***** Go guru
     #+BEGIN_SRC emacs-lisp
       (use-package go-guru
         
         :commands go-guru-hl-identifier-mode
         :init (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode))
     #+END_SRC
***** COMMENT Goflymake
     To install goflymake we first need to build the goflymake binary:
     #+BEGIN_SRC sh
       go get -u github.com/dougm/goflymake
       go build github.com/dougm/goflymake
     #+END_SRC

     #+BEGIN_SRC emacs-lisp
       (add-to-list 'load-path "~/workspace/src/github.com/dougm/goflymake")
       (require 'go-flymake)
       (require 'go-flycheck)
     #+END_SRC
***** Go eldoc
     #+BEGIN_SRC emacs-lisp
       (use-package go-eldoc
         
         :commands go-eldoc-setup
         :init (add-hook 'go-mode-hook 'go-eldoc-setup))
     #+END_SRC
***** Go Tooling
     #+BEGIN_SRC emacs-lisp
       (use-package go-imports)
       (use-package go-rename)
;       (use-package go-snippets)
       (use-package go-projectile)
     #+END_SRC
***** Go Treemacs Settings     
      #+BEGIN_SRC emacs-lisp
        (defun golang-vendor-p (name path)
          (let ((vendor (and (equal "vendor" name) (file-exists-p (format "%s/glide.yml" (file-name-directory path))))))
            ;; Debugging Message
            ;;(message (format "%s - %s" path vendor))
            vendor)) 
        (add-to-list 'treemacs-ignored-file-predicates 'golang-vendor-p)
      #+END_SRC
***** Go Hydra
     #+BEGIN_SRC emacs-lisp
       (defhydra go-hydra (:hint nil :exit t)
         ;; The '_' character is not displayed. This affects columns alignment.
         ;; Remove s many spaces as needed to make up for the '_' deficit.
         "
         ^Edit^                           ^Test or Task^                       ^Navigation^
         ^^^^^^-----------------------------------------------------------------------------------------------
          _u_: go-remove-unused-imports    _P_: go-play-buffer                  _/_: go-guru-referrers
          _F_: gofmt                       _R_: go-play-region                  _?_: go-guru-definition
          _V_: magit-status
         "
                                               ; Edit
         ("u" go-remove-unused-imports)
         ("F" gofmt)
         ("V" magit-status)
                                               ; Task
         ("P" go-play-buffer)
         ("R" go-play-region)
                                               ; Navifation
         ("/" go-guru-referrers)
         ("?" go-guru-definition)
         ("q" nil "quit"))

       (evil-leader/set-key "g" 'go-hydra/body)
     #+END_SRC
**** Html
***** emmet-mode
     #+BEGIN_SRC emacs-lisp
       (defun add-emmet-expand-to-smart-tab-completions ()
         ;; Add an entry for current major mode in
         ;; `smart-tab-completion-functions-alist' to use
         ;; `emmet-expand-line'.
         (add-to-list 'smart-tab-completion-functions-alist
                      (cons major-mode #'emmet-expand-yas)))

       (use-package emmet-mode 
         :commands (emmet-mode emmet-expand-line)
         :hook (sgml-mode css-mode)
         :init
         (setq emmet-indentation 2)
         (setq emmet-move-cursor-between-quotes t))

       (add-hook 'html-mode-hook 'add-emmet-expand-to-smart-tab-completions)
       (add-hook 'css-mode-hook 'add-emmet-expand-to-smart-tab-completions)
     #+END_SRC
**** Java
***** Language Server
     #+BEGIN_SRC emacs-lisp
              (use-package lsp-mode)

              (use-package lsp-ui
                :hook (lsp-mode . lsp-ui-mode)
                :config
                (setq lsp-ui-sideline-show-hover nil
                      lsp-ui-doc-enable nil))

              (use-package company-lsp
                :init (add-to-list 'company-backends 'company-lsp))

     #+END_SRC
****** Utilities
#+begin_src emacs-lisp
(defun iocanel/lsp-workspace-clear ()
  "Wipe lsp workspace."
  (interactive)
  (setq lsp--session (make-lsp-session)) 
  (lsp-restart-workspace))
#+end_src
****** Java
      #+BEGIN_SRC emacs-lisp
                (defun iocanel/lsp-java-actions()
                  "A function that fans out to all functions required when using java-mode."
                  (lsp)
                  (flycheck-mode)
                  (company-mode)
                  (lsp-ui-mode))

                (use-package lsp-java
                  :init
                  (setq lsp-java-vmargs '("-noverify" "-Xmx2G" "-XX:+UseG1GC" "-XX:+UseStringDeduplication")
                        lsp-java-save-action-organize-imports nil
                        lsp-java-maven-download-sources t
                        lsp-java-autobuild-enabled nil
                        lsp-java-import-gradle-enabled nil
                        lsp-inhibit-message t
                        lsp-java-format-on-type-enabled t
                        lsp-java-completion-guess-arguments t
                        lsp-java-completion-overwrite nil)
                  :hook (java-mode . iocanel/lsp-java-actions))

                ;(require 'lsp-java-treemacs)

                (evil-leader/set-key "u a" 'lsp-ui-sideline-apply-code-actions)
                (evil-leader/set-key "u o" 'lsp-java-organize-imports)
                (evil-leader/set-key "u u" 'lsp-java-update-project-configuration)

      #+END_SRC
****** COMMENT IntelliJ
      #+BEGIN_SRC emacs-lisp

        (use-package lsp-intellij :load-path "~/workspace/src/github.com/Ruin0x11/lsp-intellij") 

        ;; Since we use the source, we can comment out the actual package.
        ;;(use-package lsp-intellij)
      #+END_SRC

***** Debug Server
****** Dap Melpa
     #+BEGIN_SRC emacs-lisp
       (use-package dap-mode
          :after lsp-mode
         :config
         (dap-mode t)
         (dap-ui-mode t))

       (require 'dap-java)

       (evil-leader/set-key "d" 'dap-hydra)
     #+END_SRC
****** COMMENT Dap Local
#+BEGIN_SRC 
(use-package dap-mode :load-path "~/workspace/src/github.com/yyoncho/dap-mode"
  :after lsp-mode
  :config
  (dap-mode t)
  (dap-ui-mode t)) 
(use-package dap-java :load-path "~/workspace/src/github.com/yyoncho/dap-mode"
  :after lsp-java) 
#+END_SRC
***** Maven
     #+BEGIN_SRC emacs-lisp
       (add-to-list 'load-path "~/workspace/src/github.com/m0smith/maven-pom-mode/maven-pom-mode.el")
       (load "~/workspace/src/github.com/m0smith/maven-pom-mode/maven-pom-mode.el") 
     #+END_SRC     
***** COMMENT Meghanada
****** Package
      #+BEGIN_SRC emacs-lisp
                (use-package meghanada 
                  
                  :load-path "~/workspace/src/github.com/mopemope/meghanada-emacs/"
                  :init
                  (setq meghanada-java-path "java")
                  (setq meghanada-maven-path "mvn")
                  (setq company-meghanada-prefix-length 2)
                  (setq meghanada-server-jvm-option "-ea -server -XX:+UseConcMarkSweepGC -XX:SoftRefLRUPolicyMSPerMB=50 -Xverify:none -Xms512m -Dfile.encoding=UTF-8")
                  :config
                  ;;(add-hook 'java-mode-hook
                   ;;         (lambda ()
                              ;; meghanada-mode on
                    ;;          (meghanada-mode t)
                     ;;         (flycheck-mode +1)
                              ;; Setting c-basic-offset here breaks idee functionality of toggling 2/4 space identation.
                              ;(setq c-basic-offset 2)
                              ;; use code format (disable it for now as it can become really annoying).
                              ;;(add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))
                              )
        ;;))
      #+END_SRC
****** Hydra
      #+BEGIN_SRC emacs-lisp
        (defhydra meghanada-hydra (:hint nil :exit t)
          "
         ^Edit^                           ^Tast or Task^                       ^Navigation^
         ^^^^^^-----------------------------------------------------------------------------------------------
          _f_: meghanada-compile-file      _m_: meghanada-restart               _/_: meghanada-reference
          _c_: meghanada-compile-project   _t_: meghanada-run-task              _?_: meghanada-jump-declaration
          _o_: meghanada-optimize-import   _j_: meghanada-run-junit-test-case   _<_: meghanada-back-jump
          _s_: meghanada-switch-test-case  _J_: meghanada-run-junit-class
          _v_: meghanada-local-variable    _R_: meghanada-run-junit-recent
          _i_: meghanada-import-all        _T_: meghanada-typeinfo
          _V_: magit-status
         "
                                                ; Edit
          ("f" meghanada-compile-file)
          ("c" meghanada-compile-project)
          ("o" meghanada-optimize-import)
          ("v" meghanada-local-variable)
          ("i" meghanada-import-all)
          ("V" magit-status)

                                                ; Task
          ("s" meghanada-switch-test-case)
          ("m" meghanada-restart)

          ("t" meghanada-run-task)
          ("j" meghanada-run-junit-test-case)
          ("J" meghanada-run-junit-class)
          ("R" meghanada-run-junit-recent)
          ("T" meghanada-typeinfo)
                                                ; Navifation
          ("/" meghanada-reference)
          ("?" meghanada-jump-declaration)
          ("<" meghanada-back-jump)
          ("q" nil "quit"))

        (evil-leader/set-key "M" 'meghanada-hydra/body)
        ;(define-key evil-normal-state-map (kbd "C-z") 'meghanada-hydra/body)
      #+END_SRC
**** Groovy
     #+BEGIN_SRC emacs-lisp
       (use-package groovy-mode)
     #+END_SRC
**** COMMENT Logo
***** Installation
#+begin_src sh
  wget http://ftp.de.debian.org/debian/pool/main/u/ucblogo/ucblogo_5.5.orig.tar.gz
  tar xf ucblogo_5.5.orig.tar.gz
  cp -r ucblogo-5.5/emacs/ ~/.emacs.d/logo
  cp -r ucblogo-5.5/helpfiles/ ~/.emacs.d/logo/
  cp -r ucblogo-5.5/docs/ ~/.emacs.d/logo/
#+end_src
***** Mode
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/logo")
  (autoload 'logo-mode "logo")
  (setq auto-mode-alist (append '(("\\.lgo?$" . logo-mode)) auto-mode-alist))
  (setq logo-binary-name "/usr/bin/logo")
  (setq logo-tutorial-path "~/.emacs.d/logo/")
  (setq logo-help-path "~/.emacs.d/logo/helpfiles/")
  (setq logo-info-file "~/.emacs.d/logo/docs/ucblogo.info")
#+end_src
**** Kotlin
     #+BEGIN_SRC emacs-lisp
       (use-package kotlin-mode)
     #+END_SRC
**** Javascript
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :hook (js-mode . (lambda () (push '("function" . ?Æ’) prettify-symbols-alist)))
        :init
        (setq js-basic-indent 2)
        (setq-default js2-basic-indent 2
                      js2-basic-offset 2
                      js2-auto-indent-p t
                      js2-cleanup-whitespace t
                      js2-enter-indents-newline t
                      js2-indent-on-enter-key t
                      js2-global-externs (list "window" "module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON" "jQuery" "$")))

      ;; This seems to be broken:
      ;; `flycheck-may-use-checker: Wrong type argument: symbolp, "javascript-eslint"`
      ;; ... so let's disable for now
      ;;(add-hook 'js2-mode-hook
      ;;          (lambda () (flycheck-select-checker "javascript-eslint")))

        (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
    #+END_SRC
**** COMMENT Python
***** Packages
     #+BEGIN_SRC emacs-lisp
       (use-package python-mode)
       (use-package virtualenvwrapper)
       (use-package pytest)

     #+END_SRC
***** py-flycheck
     #+BEGIN_SRC emacs-lisp
       (add-hook 'python-mode-hook (lambda () (flycheck-mode)))
     #+END_SRC
***** pyenv
     #+BEGIN_SRC emacs-lisp
       (use-package pyenv-mode)

       (defun projectile-pyenv-mode-set ()
         "Set pyenv version matching project name."
         (let ((project (projectile-project-name)))
           (if (member project (pyenv-mode-versions))
               (pyenv-mode-set project)
             (pyenv-mode-unset))))

       (add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)

     #+END_SRC
***** anaconda-mode
     #+BEGIN_SRC emacs-lisp
       (use-package anaconda-mode)
       (use-package company-anaconda)

       (add-hook 'python-mode-hook 'anaconda-mode)
       (add-hook 'python-mode-hook 'anaconda-eldoc-mode)


       (use-package company-anaconda
         
         :init (add-to-list 'company-backends 'company-anaconda))
     #+END_SRC
***** jedi
     #+BEGIN_SRC emacs-lisp
       (use-package company-jedi)

       (defun add-company-jedi-to-backends ()
         (add-to-list 'company-backends 'company-jedi))

       (add-hook 'python-mode-hook 'add-company-jedi-to-backends)
     #+END_SRC
***** Notes
     Issues encountered in the past with *ob-ipython*.
**** COMMENT Protobuf
    #+BEGIN_SRC emacs-lisp
      (use-package protobuf-mode)
    #+END_SRC
**** Typescript
***** typescript-mode
     #+BEGIN_SRC emacs-lisp
       (defun setup-typescript-mode ()
         (interactive)
         (setq compilation-read-command nil)
         ;; Create make command for single file.
         (let ((tsc "/bin/tsc"))
           (set (make-local-variable 'compile-command)
                (progn
                  (format "%s --target es5 %s"
                          tsc
                          (buffer-file-name))))
           (message compile-command)))

       (use-package typescript-mode
         :mode "\\.ts\\'"
         :hook (ts-mode . setup-typescript-mode))
     #+END_SRC
***** tide
     #+BEGIN_SRC emacs-lisp
       (use-package tide
         :hook (typescript-mode . (lambda ()
                                    ((tide-setup)
                                     (setq flycheck-check-syntax-automatically '(save mode-enabled))
                                     (company-mode + 1)
                                     (flycheck-mode +1)
                                     (eldoc-mode +1)
                                     (tide-hl-identifier-mode +1)))))

       ;                   (add-hook 'before-save-hook 'tide-format-before-save nil t)))

     #+END_SRC
***** tss
     #+BEGIN_SRC emacs-lisp
       (use-package tss)
     #+END_SRC
**** JSON
    #+BEGIN_SRC emacs-lisp
      (use-package json-mode)
      (use-package json-reformat)
    #+END_SRC
**** YAML
    #+BEGIN_SRC emacs-lisp
      (use-package yaml-mode)
    #+END_SRC
**** COMMENT UML
***** WSD mode
#+BEGIN_SRC emacs-lisp
  (use-package wsd-mode)
#+END_SRC
** Operations
*** Docker
    #+BEGIN_SRC emacs-lisp
      (use-package docker)
      (use-package docker-tramp)
      (use-package dockerfile-mode)
    #+END_SRC
*** Kubernetes
**** Plugins
     #+BEGIN_SRC emacs-lisp
       (use-package kubernetes)
      (use-package kubernetes-evil)
       (use-package kubernetes-tramp)
;       (use-package kubernetes :load-path "~/workspace/src/github.com/chrisbarrett/kubernetes-el")
;       (use-package kubernetes-evil :load-path "~/workspace/src/github.com/chrisbarrett/kubernetes-el")
;       (use-package kubernetes-tramp)
     #+END_SRC
**** Custom Functions
***** Buffer Actions
      #+BEGIN_SRC emacs-lisp
        (defun kubernetes-create-from-region(start end)
          "Pass the selected region to kubectl/oc create."
          (interactive "r")
          (let ((tmp-filename (kubernetes--tmp-resource-name)))
            (write-region start end tmp-filename)
            (find-file-noselect tmp-filename)
            (call-process-shell-command (format "oc create -f %s"  tmp-filename))))

        (defun kubernetes-create-from-buffer()
          "Pass the current to kubectl/oc create."
          (interactive)
          (call-process-shell-command (format "oc create -f %s"  buffer-file-name)))

        (defun kubernetes-create-dwim(start end)
          "Pass the selected region or currnent buffer (if region not active) to kubectl/oc create."
          (interactive "r")
          (if (region-active-p)
              (kubernetes-create-from-region start end)
            (kubernetes-create-from-buffer)))

        (defun kubernetes-delete-from-buffer()
          "Pass the current to kubectl/oc delete."
          (interactive)
          (call-process-shell-command (format "oc delete -f %s"  buffer-file-name)))

        (defun kubernetes-delete-from-region(start end)
          "Pass the selected region to kubectl/oc delete"
          (interactive "r")
          (let ((tmp-filename (kubernetes--tmp-resource-name)))
            (write-region start end tmp-filename)
            (find-file-noselect tmp-filename)
            (call-process-shell-command (format "oc delete -f %s"  tmp-filename))))

        (defun kubernetes-delete-dwim(start end)
          "Pass the selected region or currnent buffer (if region not active) to kubectl/oc delete."
          (interactive "r")
          (if (region-active-p)
              (kubernetes-delete-from-region start end)
            (kubernetes-delete-from-buffer)))

        (defun kubernetes-replace-from-buffer()
          "Pass the current buffer to kubectl/oc create."
          (interactive)
          (call-process-shell-command (format "oc replace -f %s"  buffer-file-name)))

        (defun kubernetes-replace-from-region(start end)
          "Pass the selected region to kubectl/oc create."
          (interactive "r")
          (let ((tmp-filename (kubernetes--tmp-resource-name)))
            (write-region start end tmp-filename)
            (find-file-noselect tmp-filename)
            (call-process-shell-command (format "oc replace -f %s"  tmp-filename))))

        (defun kubernetes-replace-dwim(start end)
          "Pass the selected region or currnent buffer (if region not active) to kubectl/oc replace."
          (interactive "r")
          (if (region-active-p)
              (kubernetes-replace-from-region start end)
            (kubernetes-replace-from-buffer)))

        (defun kubernetes--tmp-resource-name()
          "Create a temporary kubernetes resource file."
          (concat temporary-file-directory "kubernetes-" (format "%06x-%06x" (random (expt 16 6)) (random (expt 16 6)))))
      #+END_SRC
***** Debug Java Application
     #+BEGIN_SRC emacs-lisp
       (defun kubernetes-portforward (point)
         "Portforwards port f the selected pod."
         (interactive "d")
         (when-let (s (get-text-property point 'kubernetes-copy))
           (kill-new s)

           ;; Print a user-friendly message for feedback.
           (let ((n-lines 1)
                 (first-line nil)
                 (local-port (read-number "Choose local port:"))
                 (remote-port (read-number "Choose port to debug:")))
             (with-temp-buffer
               (insert s)
               (goto-char (point-min))
               (setq first-line (buffer-substring (line-beginning-position) (line-end-position)))
               (while (search-forward "\n" nil t)
                 (setq n-lines (1+ n-lines))))
             (let ((ellipsized (kubernetes-utils-ellipsize first-line 70)))
               (if (< 1 n-lines)
                   (message "Copied %s lines, starting with: %s" n-lines ellipsized)
                 (async-shell-command (format "%s %s %s" "kubectl port-forward"  ellipsized (format "%s:%s" local-port remote-port)))
                 (message "Portforwarding: %s" ellipsized))))))
     #+END_SRC
**** Hydra
     #+BEGIN_SRC emacs-lisp
       (defhydra kubernetes-hydra (:hint nil :exit t)
                ;; The '_' character is not displayed. This affects columns alignment.
                ;; Remove s many spaces as needed to make up for the '_' deficit.
                "
             ^Kubernetes Dashboard^                          ^Buffer^                              ^Resource^
                       ^^^^^^---------------------------------------------------------------------------------------------------
                        _o_: Overview                        _C_: create dwim                      _d_: delete
                        _r_: Refresh now                     _D_: delete dwim                      _e_: exec
                        _x_: Execute all marks               _R_: replace dwim                     _l_: log
                                                                                               _p_: portforward
                       "
                ("o" kubernetes-overview)
                ("r" kubernetes-refresh)
                ("C" idee-kubernetes-create-dwim)
                ("D" idee-kubernetes-delete-dwim)
                ("R" idee-kubernetes-replace-dwim)
                ("e" kubernetes-exec-into)
                ("l" kubernetes-logs-follow)
                ("d" kubernetes-mark-for-delete)
                ("x" kubernetes-execute-marks)
                ("p" kubernetes-portforward)
                ("q" nil "quit"))

              (evil-leader/set-key "k" 'kubernetes-hydra/body)
              (define-key evil-normal-state-map (kbd "C-k") 'kubernetes-hydra/body)
     #+END_SRC
*** Jenkins
**** Pipeline from buffer
     We are going to create a shell script that gets the job done and then we are going to call that from within emacs.
    
     Define the a shell script named jenkins-run-pipeline
     #+BEGIN_SRC shell :tangle /home/iocanel/scripts/dev/jenkins-run-pipeline :shebang #!/bin/bash
       JOB="dev"
       CONFIG_XML="/tmp/jenkins-job.xml"

       PIPELINE=`cat $1`

       read -r -d '' HEADER << __HEADER__ 
       <?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job@2.3">
         <actions/>
         <description/>
         <keepDependencies>false</keepDependencies>
         <properties/>
         <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.9">
           <script>
       __HEADER__

       read -r -d '' FOOTER << __FOOTER__ 
           </script>
           <sandbox>true</sandbox>
         </definition>
         <triggers/>
       </flow-definition>
       __FOOTER__

       echo "$HEADER" > /tmp/jenkins-job.xml
       echo "$PIPELINE" >> /tmp/jenkins-job.xml
       echo "$FOOTER" >> /tmp/jenkins-job.xml

       curl -X POST http://jenkins.minikube.io/job/$JOB/config.xml --data-binary "@$CONFIG_XML" 2> /dev/null
       BUILD_ID=`curl -X GET http://jenkins.minikube.io/job/$JOB/api/json 2> /dev/null | jq '.nextBuildNumber'`
       QUEUE_ITEM_URL=`curl -i http://jenkins.minikube.io/job/dev/build 2> /dev/null | grep Location | cut -d " " -f2`
       echo "Starting Job:$JOB with Build number: $BUILD_ID"

       #Wait until the build is up and running
       echo -n "Waiting"
       while true; do
           STATUS_CODE=`curl --write-out %{http_code} --silent --output /dev/null  http://jenkins.minikube.io/job/$JOB/$BUILD_ID/api/json`
           if [[ $STATUS_CODE -eq 404 ]]; then
               echo -n "."
               sleep 2
           else
               break
           fi
       done
       echo ""

       TOTAL_LINES=0
       # Loop forever (or at least until the build is over) and get the logs
       while true; do
           RUNNING=`curl -X GET http://jenkins.minikube.io/job/$JOB/$BUILD_ID/api/json 2> /dev/null | jq '.building'`
           TEXT=`curl -s http://jenkins.minikube.io/job/$JOB/$BUILD_ID/consoleText 2> /dev/null`
           TO_DISPLAY=`echo "$TEXT" | tail -n +$(($TOTAL_LINES+1))`
           if [ "$TO_DISPLAY" == "" ];then
               continue;
           fi
           echo "$TO_DISPLAY"
           PRINTED_LINES=`echo "$TO_DISPLAY" | wc -l`
           TOTAL_LINES=$(($TOTAL_LINES + $PRINTED_LINES))

           if [ "$RUNNING" == "true" ]; then
               sleep 2
           else
               break
           fi
       done
     #+END_SRC
     Define a function that calls jenkins-run-pipeline.
     #+BEGIN_SRC emacs-lisp
       (defun jenkins-run-pipeline-from-buffer ()
         "Runs the jenkins pipeline in the buffer"
         (interactive)
         (async-shell-command (format "%s %s" "jenkins-run-pipeline"  buffer-file-name)))
     #+END_SRC
**** Use groovy-mode for Jenkinsfiles
     #+BEGIN_SRC emacs-lisp
       (add-to-list 'auto-mode-alist '("Jenkinsfile" . groovy-mode))
     #+END_SRC
** IDEE
    #+BEGIN_SRC emacs-lisp
      (use-package queue)

      (use-package idee :straight (idee :host github :repo "iocanel/idee"))
      (require 'idee-evil)
;      (require 'idee-clojure)
;      (require 'idee-golang)
      (require 'idee-java)
      (require 'idee-lsp-java)
;      (require 'idee-javascript)
;      (require 'idee-python)
      (require 'idee-maven)
      (require 'idee-spring)
      (require 'idee-quarkus)
      (require 'idee-dap)
      (require 'idee-treemacs)
      (require 'idee-eshell)
      (require 'idee-docker)
      (require 'idee-kubernetes)
    #+END_SRC
** Work
*** Update CVEs
#+begin_src emacs-lisp

  (defun check-cves ()
    "Update the list of CVE issues"
    (interactive)
    (shell-command "/home/iocanel/scripts/work/collect-cve.sh ~/Documents/work/cve.org")
    (find-file "~/Documents/work/cve.org"))
#+end_src
**** COMMENT Vterm
Let's try and use vterm.
It doesn't seem to be really close to what I am looking for, but lets keep it around and maybe revisit in the future.
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/workspace/src/github.com/akermu/emacs-libvterm")
  (let (vterm-install)
    (require 'vterm))
#+end_src
