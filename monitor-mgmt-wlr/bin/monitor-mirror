#!/bin/bash

# Mirror a selected monitor output to another monitor using wl-mirror

# Get all connected monitors using wlr-randr
mapfile -t monitors < <(wlr-randr | grep -E "^[A-Za-z0-9-]+" | awk '{print $1}')

if [[ ${#monitors[@]} -lt 2 ]]; then
    echo "Need at least 2 monitors for mirroring. Found: ${monitors[*]}"
    exit 1
fi

echo "Available monitors: ${monitors[*]}"

# Use slurp to let user select which monitor to mirror
echo "Click on the monitor you want to mirror..."
source_output=$(slurp -f "%o" -o)

if [[ -z "$source_output" ]]; then
    echo "No monitor selected. Exiting."
    exit 1
fi

echo "Source monitor: $source_output"

# Find the target monitor (the other one)
target_monitor=""
for monitor in "${monitors[@]}"; do
    if [[ "$monitor" != "$source_output" ]]; then
        target_monitor="$monitor"
        break
    fi
done

if [[ -z "$target_monitor" ]]; then
    echo "Could not find target monitor. Exiting."
    exit 1
fi

echo "Target monitor: $target_monitor"

# Kill any existing wl-mirror processes
pkill wl-mirror

# Start wl-mirror to mirror the source output to a window
echo "Starting mirror from $source_output to $target_monitor..."
wl-mirror "$source_output" &
mirror_pid=$!

# Mirror is now running - no automatic window management
echo "Mirror window should appear shortly."
echo "You can manually move and resize the wl-mirror window as needed."

echo "Mirror active: $source_output -> $target_monitor (PID: $mirror_pid)"
echo "Press Ctrl+C to stop mirroring"

# Wait for the mirror process or user interrupt
wait $mirror_pid 
